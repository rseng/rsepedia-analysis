titl minimalist customis optimis packag tag python oper research monoobject multiobject author name jérôme buisin orcid x affili multipl affili must quot name samuel delepoul orcid affili multipl affili must quot name christoph renaud orcid affili multipl affili must quot affili name univ littor côte dopal lisic calai franc f index date octob bibliographi paperbib option field submit aa journal see blog post httpsblogjosstheojorganewcollaborationwithaaspublish aasdoi xxxxx updat doi aa know aasjourn astrophys journal name aa journal summari optimis problem frequent encount scienc industri given realvalu function f defin set call search space x optimis function f consist find point x x optim valu fx least construct sequenc x_t_t mathbfn xmathbbn close optimum depend search space x optimis problem global classifi discret problem eg xn continu problem eg xmathbbrn tool model solv discret solidsolv continu ceressolv problem propos literatur paper macop minimalist customis optimis packag propos discret optimis python packag doesnt implement everi algorithm literatur provid abil quickli develop test algorithm strategi main object packag provid maximum flexibl allow easi implement experi new algorithm base common interact loop see autoreffigmacopbehaviour algorithm macop want allow user quickli focu one main part loop macop common inter looplabelfigmacopbehaviourdocssource_staticdocumentationmacop_behaviour_reducedpng statement need oper research librari develop python offer user either problem algorithm possibl choos paramet obtain optim near optim result propos _ librari target specif problem algorithm simannealsolv anoth packag propos solidsolv comprehens gradientfre optim framework written python seem similar macop howev hiearchic depend algorithm notion callback adapt oper select propos within macop hand avail librari pyoptpap hartpyomo literatur allow attach custom evalu function algorithm use hierarchi algorithm inde sometim possibl main algorithm manag local search local search may evalu solut differ use differ evalu function parent algorithm main algorithm exampl use surrog mathemat model quicktoevalu function real evalu function expens time macop algorithm mechan partial ie evalu function oper obtain new solut well solut updat polici independ parent algorithm link mean result solut found exchang henc motiv behind macop flexibl discret optimis packag allow quick implement problem particular meet follow need common basi interact loop solut find process propos within packag common heurist allow user modifi part interact loop necessari without render process nonfunct hierarchi hierarch algorithm manag system avail especi algorithm need manag local search hierarchi remain transpar user main algorithm abl manag control process search solut flexibl although algorithm depend possibl intern manag search mechan differ mean way solut evalu updat exampl may differ abstract thank modular separ packag quickli possibl implement new problem solut represent way evalu updat solut within packag extens packag open extens ie partit user develop choic well implement continu optim problem need make use main interact loop propos packag easi setup pure python packag distribut pip instal easi use target audienc packag would meet expect peopl wish solv problem use evolutionari algorithm without develop frawmework reli packag alreadi propos also gener flexibl contribut order adapt content conduct research work lead rapid modif metaheurist interact differ algorithm precis test new combin algorithm chang algorithm evalu eg differ local search provid reinforc learn search eg adapt oper choic strategi test new multiobject method quickli thank propos algorithm hierarchi allow easili decompos multiobject problem singleobject subproblem take advantag system launch calcul backup order avoid loss case unwant program interrupt quickli model problem still unknown ie type solut evalu function take advantag interact loop propos packag descript begin develop librari idea make modular possibl topic librari divid submodul form consid import build solv optimis problem packag consist main sever modul solut represent solut valid constraint program valid function use valid solut data state evalu store problem instanc data implement comput method order evalu solut oper mutat crossov oper updat obtain new solut polici way choos avail oper might use reinforc learn algorithm gener implement optimis research algorithm callback callback automat keep track search space advanc restart previou state ned primari advantag use python allow dynam add new member within new implement solut algorithm class cours close possibl extens storag inform within solut algorithm depend current need macopalgorithm modul singl multiobject algorithm implement demonstr purpos hierarchi depend algorithm also avail base parentchild link allow quick access global inform look solut best solut found number global evalu monoobject iter local search lourenço algorithm implement algorithm aim perform local search child algorithm link main algorithm explor explor vs exploit tradeoff multiobject side moead algorithm dblpjournalsteczhangl implement use weightedsum object chang multiobject problem set monoobject problem tchebycheff approach also use dblpjournalscoralvesa henc algorithm aim decompos multiobject problem mu singleobject problem order obtain pareto front kimadapt singleobject problem socal child algorithm link multiobject algorithm main purpos develop algorithm show possibl oper search algorithm implement base minimalist structur librari macopsolut modul current combinatori solut discret problem modelis offer wellknown problem knapsack exampl cours easi add represent solut solut model continu problem also creat anyon want model problem macopoper macoppolici modul mutat crossov oper implement howev remain quit simpl interest possibl develop one strategi choos oper next evalu avail ucbpolici class propos function exampl sinc seek propos best oper appli base method known adapt oper select ao via use upper confid bound ucb algorithm dblpjournalsteclifkz macopcallback modul use callback instanc allow action everi k evalu inform also reload run algorithm cut simpli inherit abstract callback class implement appli method backup load restor possibl add mani callback requir exampl implement ucbpolici callback allow instanc reload previous collect statist restart use conclus macop aim allow model discret usual combinatori optimis problem therefor open expans close specif kind problem macop propos simpl structur interact main element algorithm oper solut polici callback resolut oper research problem insid interact loop gener structur possibl thank flexibl program paradigm python languag easili allow extens develop new algorithm problem base simpl concept packag therefor meet need rapid problem implement acknowledg work support agenc national de la recherch project anrc refer minimalist customis optimis packag statushttpsjosstheojorgpaperseadcfafcbadffestatussvghttpsjosstheojorgpaperseadcfafcbadff httpsimgshieldsiogithubworkflowstatusjbuisinemacopbuildhttpsgithubcomjbuisinemacopactionsworkflowspythonappyml pypihttpsimgshieldsiopypivmacophttpspypiorgprojectmacop httpsimgshieldsiopypidmmacophttpspypiorgprojectmacop githubhttpsimgshieldsiogithublicensejbuisinemacopstyleflathttpsgithubcomjbuisinemacopblobmasterlic p aligncent img srchttpsgithubcomjbuisinemacopblobmasterdocssource_staticlogo_macoppng alt width p descript macop python packag solv discret optimis problem natur continu optimis also applic need object allow user exploit basic structur propos packag solv problem specif interest quickli abstract complic relat way evalu compar save progress search good solut rather concentr necessari algorithm inde macop offer follow main basic featur solut represent solut valid constraint program valid function use valid solut data state evalu store problem instanc data implement comput method order evalu solut oper mutat crossov oper updat obtain new solut polici way choos avail oper might use reinforc learn algorithm gener implement optimis research algorithm callback callback automat keep track search space advanc restart previou state ned p aligncent img srchttpsgithubcomjbuisinemacopblobmasterdocssource_staticdocumentationmacop_behaviourpng alt width p motiv flexibl discret optimis packag allow quick implement problem particular meet follow need common basi interact loop solut find process propos within packag common heurist allow user modifi part interact loop necessari without render process nonfunct hierarchi hierarch algorithm manag system avail especi algorithm need manag local search hierarchi remain transpar user main algorithm abl manag control process search solut flexibl although algorithm depend possibl intern manag differ mean way solut evalu updat exampl may differ abstract thank modular separ packag quickli possibl implement new problem solut represent way evalu updat solut within packag extens packag open extens ie partit user develop choic well implement continu optim problem need make use main interact loop propos packag easi setup pure python packag distribut pip instal easi use target audienc packag would meet expect peopl wish solv problem use evolutionari algorithm without develop frawmework reli packag alreadi propos also gener flexibl contribut order adapt content conduct research work lead rapid modif metaheurist interact differ algorithm precis test new combin algorithm chang algorithm evalu eg differ local search provid reinforc learn search eg adapt oper choic strategi test new multiobject method quickli thank propos algorithm hierarchi allow easili decompos multiobject problem singleobject subproblem take advantag system launch calcul backup order avoid loss case unwant program interrupt quickli model problem still unknown ie type solut evalu function take advantag interact loop propos packag content primari advantag use python allow dynam add new member within new implement solut algorithm class cours close possibl extens storag inform within solut algorithm depend need question macopalgorithm modul singl multiobject algorithm implement demonstr purpos hierarchi depend algorithm also avail base parentchild link allow quick access global inform look solut best solut found number global evalu monoobject iter local search algorithm aim perform local search child algorithm link main algorithm explor explor vs exploit tradeoff multiobject side moead algorithm implement use weightedsum object chang multiobject problem set monoobject tchebycheff approach also use henc algorithm aim decompos multiobject problem mu singleobject problem order obtain pareto front singleobject problem socal child algorithm link multiobject algorithm main purpos develop algorithm show possibl oper search algorithm implement base minimalist structur librari macopsolut modul current combinatori solut discret problem modelis offer wellknown problem knapsack exampl cours easi add represent solut solut model continu problem also creat anyon want model problem macopoper macoppolici modul mutat crossov oper implement howev remain quit simpl interest possibl develop one strategi choos oper next evalu avail ucbpolici class propos function exampl sinc seek propos best oper appli base method known adapt oper select ao via use upper confid bound ucb algorithm macopcallback modul use callback instanc allow action everi k evalu inform also reload run algorithm cut simpli inherit abstract callback class implement appli method backup load restor possibl add mani callback requir exampl implement ucbpolici callback allow instanc reload previous collect statist restart use document base gener andor implement function user abl quickli develop solut problem retain possibl remain control develop overload exist function necessari main idea python packag doesnt implement everi algorithm literatur let possibl user quickli develop test algorithm strategi main object packag provid maximum flexibl allow easi experiment implement fulli document packag exampl availablehttpsjbuisinegithubiomacop also see exampl use knapsackexamplepyhttpsgithubcomjbuisinemacopblobmasterexamplesknapsackexamplepi monoobject knapsack instanc knapsackmultiexamplepyhttpsgithubcomjbuisinemacopblobmasterexamplesknapsackmultiexamplepi multiobject knapsack instanc qapexamplepyhttpsgithubcomjbuisinemacopblobmasterexamplesqapexamplepi monoobject qap instanc ubqpexamplepyhttpsgithubcomjbuisinemacopblobmasterexamplesubqpexamplepi monoobject ubqp problem instanc zdtexamplepyhttpsgithubcomjbuisinemacopblobmasterexampleszdtexamplepi continu optimis problem zdt function add depend bash git submodul add httpsgithubcomjbuisinemacopgit current project use macop prisednoisedetectionattributesoptimizationhttpsgithubcomprisednoisedetectionattributesoptim use parent algorithm real expens evalu function inner local search use substitut model model learn approxim real cost function quicktoevalu function henc two evalu function use order acceler search set solut licens mit licenselicensehow contribut p aligncent img srchttpsgithubcomjbuisinemacopblobmasterdocssource_staticlogo_macoppng alt width p welcom thank take time read guid packag contribut im glad know may bring lot macop packag document show good develop practic use project easili particip evolut tabl content submiss processessubmissionprocess submit issuesubmitanissu pull requestpullrequest seek supportseeksupport code conventionscodingconvent python conventionspythonconvent code documentationcodedocument testingtestimplement submiss process submit issu hesit report bug issu httpsgithubcomjbuisinemacopissueshttpsgithubcomjbuisinemacopissu common templat header packag version xxx issu label xxxxx target modul macopalgorithm macoppolici oper system manjaro linux descript xxxxx pull request made chang project fork submit pull request httpsgithubcomjbuisinemacoppullshttpsgithubcomjbuisinemacoppul order chang ad insid new version macop packag github documentationhttpshelpgithubcomarticlesaboutpullrequest pull request avail necessari enhanc packag hesit fix bug miss featur submit pull request common templat header packag version xxx enhanc label xxxxx target modul macopalgorithm macoppolici new modul macopxxxx macopalgorithmsxxxx descript xxxxx note code convent requir approv chang describ whatev problem report thank contribut project hesit seek support problem use packag issu pull request submiss hesit let messag httpsgithubcomjbuisinemacopdiscussionshttpsgithubcomjbuisinemacopdiscuss especi question answer section also contact follow email address contactjeromebuisinefr code convent python convent project follow code conventionshttpgooglegithubiostyleguidepyguidehtml implement googl help format py file possibl use yapfhttpsgithubcomgoogleyapf python packag develop googl yapf ir vv macop note need least python version packag modul convent perhap alreadi saw packag contain multipl modul submodul realli import well organ packag let intuit access possibl featur macop mainli decompos discret continu optimis especi want offer continu optimis problem modul alreadi avail purpos refer documentationhttpsjbuisinegithubiomacop necessari order facilit integr new modul hesit let know name could beforehand pull request code document order allow quick access code project follow document convent docstr propos googl exampl python class binarysolut binari integ solut class store solut binari array exampl associ size size array mainli use select element list valuabl object attribut data ndarray array binari valu size int size binari array valu score float fit score valu method python class binarysolut def randomself valid intial binari array use valid gener valid random solut arg size int expect solut size gener valid function specif function valid solut none valid appli return classmacopsolutionsdiscretebinarysolut new gener binari solut gener document display updat use follow command cd doc make clean make html firefox _buildhtmlindexhtml test implement project use doctesthttpsdocspythonorglibrarydoctesthtml packag enabl write test document shown exampl python initialis binari solut use specif data arg data ndarray array binari valu size int size binari array valu exampl macopsolutionsdiscret import binarysolut build solut use specif data size data solut binarysolutiondata lendata check data content sumsolutiondata true clone solut solution_copi solutionclon allsolution_copy_data solutiondata moreov test written display gener document show exampl use develop featur contribut imag _staticlogo_macoppng width px align center use github pleas refer guidelines_ file want inform process _guidelin httpsgithubcomprisedmacopblobmastercontributingmdexampl use find exampl use macop implement problem well known literatur discret problem toctre maxdepth qap_exampl ubqp_exampl continu problem toctre maxdepth zdt_exampl avail code exampl monoobject knapsack problem knapsackexamplepy_ multiobject knapsack problem knapsackmultiexamplepy_ qap problem qapexamplepy_ ubqp problem ubqpexamplepy_ continu zdt optimis problem zdtexamplepy_ _knapsackexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesknapsackexamplepi _knapsackmultiexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesknapsackmultiexamplepi _qapexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesqapexamplepi _ubqpexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesubqpexamplepi _zdtexamplepi httpsgithubcomjbuisinemacopblobmasterexampleszdtexamplepydescript imag _staticlogo_macoppng width px align center context base gener behaviour macop algorithm run repres interact loop interact specifi need step imag _staticdocumentationmacop_behaviourpng width px align center packag strongli orient combinatori optimis henc discret optimis remain possibl extend continu optimis motiv flexibl discret optimis packag allow quick implement problem particular meet follow need common basi interact loop solut find process propos within packag common heurist allow user modifi part interact loop necessari without render process nonfunct hierarchi hierarch algorithm manag system avail especi algorithm need manag local search hierarchi remain transpar user main algorithm abl manag control process search solut flexibl although algorithm depend possibl intern manag differ mean way solut evalu updat exampl may differ abstract thank modular separ packag quickli possibl implement new problem solut represent way evalu updat solut within packag extens packag open extens ie partit user develop choic well implement continu optim problem need make use main interact loop propos packag easi setup pure python packag distribut pip instal easi use target audienc packag would meet expect peopl wish solv problem use evolutionari algorithm without develop frawmework reli packag alreadi propos also gener flexibl contribut order adapt content conduct research work lead rapid modif metaheurist interact differ algorithm precis test new combin algorithm chang algorithm evalu eg differ local search provid reinforc learn search eg adapt oper choic strategi test new multiobject method quickli thank propos algorithm hierarchi allow easili decompos multiobject problem singleobject subproblem take advantag system launch calcul backup order avoid loss case unwant program interrupt quickli model problem still unknown ie type solut evalu function take advantag interact loop propos packag instal instal packag use pip python packag manag code bash pip instal macop quadratr assign problem exampl deal use macop packag relat quadrat assign problem qap use known exampl problem associ set facil mathf set locat mathl imag _staticexamplesqapfactories_qappng width align center alt exampl qap facil locat problem note full code propos exampl avail qapexamplepy_ _qapexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesqapexamplepi qap problem definit quadrat assign problem qap introduc koopman beckman context locat indivis econom activ object problem assign set facil set locat way minim total assign cost assign cost pair facil function flow facil distanc locat facil locat assign exampl consid facil locat problem four facil four locat one possibl assign shown figur facil assign locat facil assign locat facil assign locat facil assign locat assign written permut mathp mean facil assign locat facil assign locat facil assign locat facil assign locat figur line pair facil indic requir flow facil thick line increas valu flow imag _staticexamplesqapfactories_qappng width align center alt exampl qap facil locat problem calcul assign cost permut requir flow facil distanc locat need tabularcolumn pcmpcmpcmpcm csvtabl flow current facil header facil facil j flow j width csvtabl distanc locat header locat locat j distanc j width assign cost permut comput mathfdfdfdfd result math note permut optim solut mathemat definit set mathnn maths_nphinn set permut paramet mathff_ij mathnn matrix mathf_ij requir flow facil mathi mathj mathdd_ij mathnn matrix mathd_ij distanc locat mathi mathj optim problem mathmin_ϕs_nsum_insum_jnf_ijd_phiiphij assign facil locat repres permut mathphi mathphii locat facil mathi assign individu product mathf_ijd_phiiphij cost assign facil mathi locat mathphii facil mathj locat mathphij qap problem instanc gener defin quadrat assign problem instanc use avail mqap_ multiobject quadrat problem gener genrat instanc limit singl object purpos exampl file makeqapunicc use gener instanc code bash g makeqapunicc mqapgener mqapgener n k f qap_instancetxt follow paramet n posit integ number facilitiesloc k posit integ number object f posit integ maximum flow facil posit integ maximum distanc locat posit long random seed gener qap_instancetxt_ file contain two matric mathf mathd defin instanc problem _mqap httpswwwcsbhamacukjdkmqap _qap_instancetxt httpsgithubcomjbuisinemacopblobmasterexamplesinstancesqapqap_instancetxt load data instanc go load instanc via python code use us later code python qap_instance_fil qap_instancetxt n instanc size openqap_instance_fil r f file_data freadlin printfinst inform file_data d_line file_datan d_data joind_linesreplacen f_line file_datan n f_data joinf_linesreplacen d_matrix npfromstringd_data dtypefloat sep reshapen n printfd matrix shape d_matrixshap f_matrix npfromstringf_data dtypefloat sep reshapen n printff matrix shape f_matrixshap note know size instanc structur document quit quick look line relat mathf mathd matric macop qap implement let see possibl use macop packag implement deal qap instanc problem solut structur definit firstli go use type solut allow us defin structur solut avail macopsolutionsdiscretecombinatoryintegersolution_ type solut within macop packag repres exactli one would wish ie solut store sequenc integ rel size problem order sort let see exampl use code python macopsolutionsdiscret import combinatoryintegersolut solut combinatoryintegersolutionrandom printsolut result solut obtain code bash combinatori integ solut qap evalu structur solut mean gener seek evalu need creat new evalu specif problem rel evalu function mathmin_ϕs_nsum_insum_jnf_ijd_phiiphij go creat class inherit abstract class macopevaluatorsbaseevaluator_ code python macopevaluatorsbas import evalu class qapevaluatorevalu qap evalu class enabl comput qap solut use specif _data store _data dictionari attritut requir measur comput qap solut _dataf matrix size n x n flow data facil store numpi array _datad matrix size n x n distanc data locat store numpi array comput method enabl comput associ score given qap solut def computeself solut appli comput fit solut arg solut solut qap solut instanc return float fit score solut fit index_i val_i enumeratesolutiongetdata index_j val_j enumeratesolutiongetdata fit self_datafindex_i index_j self_datadval_i val_j return fit cost function quadrat problem well defin tip class propos avail macop packag macopevaluatorsdiscretemonoqapevaluator_ run algorithm necessari tool avail abl deal problem look solut search space qap instanc use local search algorithm alreadi implement macop uncomfort element code follow refer complet macop documentation_ focus concept tool packag code python main import import numpi np modul import macopsolutionsdiscret import combinatoryintegersolut macopevaluatorsdiscretemono import qapevalu macopoperatorsdiscretemut import simplemut macoppoliciesclass import randompolici macopalgorithmsmono import iteratedlocalsearch il macopalgorithmsmono import hillclimberfirstimprov useful instanc data n qap_instance_fil qap_instancetxt default valid check consist data ie uniqu element def validatorsolut lenlistsolutiongetdata lensetlistsolutiongetdata printnot valid return fals return true defin init random solut def init return combinatoryintegersolutionrandomn valid load qap instanc openqap_instance_fil r f file_data freadlin printfinst inform file_data d_line file_datan d_data joind_linesreplacen f_line file_datan n f_data joinf_linesreplacen d_matrix npfromstringd_data dtypefloat sep reshapen n printfd matrix shape d_matrixshap f_matrix npfromstringf_data dtypefloat sep reshapen n printff matrix shape f_matrixshap one oper oper simplemut random polici even list solut one element polici randompolicyoper use load data qap instanc evalu qapevaluatordataf f_matrix d_matrix pass global evalu param il hcfi hillclimberfirstimprovmentinit evalu oper polici valid maximisefals verbosetru algo ilsinit evalu oper polici valid localsearchhcfi maximisefals verbosetru run algorithm bestsol algorun ls_evalu printsolut qap instanc score formatevaluatorcomputebestsol qap problem solv possibl macop remind complet code avail qapexamplepy_ file _qapexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesqapexamplepi _document httpsjbuisinegithubiomacop_buildhtmldocument _macopsolutionsdiscretecombinatoryintegersolut macopmacopsolutionsdiscretehtmlmacopsolutionsdiscretecombinatoryintegersolut _macopevaluatorsbaseevalu macopmacopevaluatorsbasehtmlmacopevaluatorsbaseevalu _macopevaluatorsdiscretemonoqapevalu macopmacopevaluatorsdiscretemonohtmlmacopevaluatorsdiscretemonoqapevalu zdt optimis problem appli mathemat test function known artifici landscap use evalu characterist continu optim algorithm converg rate precis robust gener perform note full code propos exampl avail zdtexamplepy_ rosenbrock function mathemat optim rosenbrock function nonconvex function introduc howard h rosenbrock use perform test problem optim algorithm mathemat definit function defin mathfx x x global minimum mathx mathfx usual paramet set matha mathb trivial case matha function symmetr minimum origin represent function paramet matha mathb imag _staticexampleszdtrosenbrock_functionjpg width align center alt represent rosenbrock function search space defin mathinfti leq x_i leq infti leq leq n optim solut defin mathf mathn specif instanc use use matha mathb function rewritten mathfxsum_inx_i x_i x_i current implement exampl search space reduc math leq x_i leq instanc size set mathn macop implement let see possibl use macop packag implement deal rosenbrock function instanc problem solut structur definit firstli go use type solut allow us defin structur solut avail macopsolutionscontinuouscontinuoussolution_ type solut within macop packag repres exactli one would wish ie solut store float array respect size problem let see exampl use code python macopsolutionscontinu import continuoussolut problem_interv solut continuoussolutionrandom intervalproblem_interv printsolut problem_interv variabl requir order gener continu solut respect search space result solut obtain someth like code bash continu solut zdt evalu structur solut mean gener seek evalu need creat new evalu specif problem rel evalu function mathfxsum_inx_i x_i x_i go creat class inherit abstract class macopevaluatorsbaseevaluator_ code python macopevaluatorsbas import evalu class zdtevaluatorevalu gener zdt evalu class enabl comput custom zdt function continu problem store _data dictionari attritut requir measur comput continu solut _dataf store lambda zdt function comput method enabl comput associ score given continu solut def computeself solut appli comput fit solut arg solut classmacopsolutionsbasesolut solut instanc return float fit score solut return self_datafsolut cost function zdt continu problem well defin still need defin lambda function code python macopevaluatorscontinuousmono import zdtevalu rosenbrock function definit rosenbrock_funct lambda sum mathpowsdatai mathpowsdatai mathpow sdatai rangelensdata evalu zdtevaluatordataf rosenbrock_funct tip class propos avail macop packag macopevaluatorscontinuousmonozdtevaluator_ run algorithm necessari tool avail abl deal problem look solut search space zdt rosenbrock instanc use local search algorithm alreadi implement macop uncomfort element code follow refer complet macop documentation_ focus concept tool packag code python main import import numpi np modul import macopsolutionscontinu import continuoussolut macopevaluatorscontinuousmono import zdtevalu macopoperatorscontinuousmut import polynomialmut macoppoliciesclass import randompolici macopalgorithmsmono import iteratedlocalsearch il macopalgorithmsmono import hillclimberfirstimprov useful instanc data n problem_interv qap_instance_fil zdt_instancetxt default valid check consist data ie x_i element search space def validatorsolut mini maxi problem_interv x solutiondata x mini x maxi return fals return true defin init random solut search space bound def init return continuoussolutionrandomn intervalproblem_interv valid one oper oper polynomialmut random polici even list solut one element polici randompolicyoper rosenbrock function definit rosenbrock_funct lambda sum mathpowsdatai mathpowsdatai mathpow sdatai rangelensdata evalu zdtevaluatordataf rosenbrock_funct pass global evalu param il hcfi hillclimberfirstimprovmentinit evalu oper polici valid maximisefals verbosetru algo ilsinit evalu oper polici valid localsearchhcfi maximisefals verbosetru run algorithm bestsol algorun ls_evalu printsolut zdt rosenbrock instanc score formatevaluatorcomputebestsol continu rosenbrock function problem possibl macop remind complet code avail zdtexamplepy_ file _zdtexamplepi httpsgithubcomjbuisinemacopblobmasterexampleszdtexamplepi _document httpsjbuisinegithubiomacop_buildhtmldocument _macopsolutionscontinuouscontinuoussolut macopmacopsolutionscontinuoushtmlmacopsolutionscontinuouscontinuoussolut _macopevaluatorsbaseevalu macopmacopevaluatorsbasehtmlmacopevaluatorsbaseevalu _macopevaluatorscontinuousmonozdtevalu macopmacopevaluatorscontinuousmonohtmlmacopevaluatorscontinuousmonozdtevaluatorminimalist customis optimis packag imag _staticlogo_macoppng width px align center what macop macop discret optimis python packag doesnt implement everi algorithm literatur provid abil quickli develop test algorithm strategi main object packag provid maximum flexibl allow easi experiment implement content toctre maxdepth descript document api exampl contribut motiv flexibl discret optimis packag allow quick implement problem particular meet follow need common basi interact loop solut find process propos within packag common heurist allow user modifi part interact loop necessari without render process nonfunct hierarchi hierarch algorithm manag system avail especi algorithm need manag local search hierarchi remain transpar user main algorithm abl manag control process search solut flexibl although algorithm depend possibl intern manag differ mean way solut evalu updat exampl may differ abstract thank modular separ packag quickli possibl implement new problem solut represent way evalu updat solut within packag extens packag open extens ie partit user develop choic well implement continu optim problem need make use main interact loop propos packag easi setup pure python packag distribut pip instal easi use indic tabl refgenindex refmodindex refsearch unconstrain binari quadrat program given collect mathn item pair item associ profit valu posit neg zero unconstrain binari quadrat program ubqp seek subset item maxim sum pair valu valu pair accumul sum two correspond item select ubqp problem tackl exampl ubqp problem definit understand ubqp problem given collect mathn item pair item associ profit valu posit neg zero unconstrain binari quadrat program ubqp seek subset item maxim sum pair valu valu pair accumul sum two correspond item select feasibl solut ubqp instanc specifi binari string size mathn variabl indic whether correspond item includ select mathemat definit formal convent singleobject ubqp problem maxim follow object function mathfxxqxsum_insum_jnq_ijx_ix_j mathqq_ij mathn mathn matrix constant valu mathx vector mathn binari zeroon variabl ie mathx mathi n mathx transpos mathx ubqp problem instanc gener defin quadrat assign problem instanc use avail mubqp_ multiobject quadrat problem gener genrat instanc limit singl object purpos exampl avail file mubqpgeneratorr use gener instanc use r languag code bash rscript mubqpgeneratorr ubqp_instancetxt main paramet use gener ubqp instanc ρ object correl coeffici number object function n length bit string matrix densiti frequenc nonzero number seed use _mubqp httpmocobenchsourceforgenetindexphpnproblemmubqp _ubqp_instancetxt httpsgithubcomjbuisinemacopblobmasterexamplesinstancesubqpubqp_instancetxt load data instanc go load instanc via python code use us later code python qap_instance_fil ubqp_instancetxt n instanc size load ubqp instanc openubqp_instance_fil r f line freadlin get string float point valu matrix q_data join linereplacen line line load concaten obtain string q_matrix npfromstringq_data dtypefloat sep reshapen n printfq_matrix q_matrixshap note know size instanc structur document header size quit quick look line relat mathq matrix macop ubqp implement let see possibl use macop packag implement deal ubqp instanc problem solut structur definit firstli go use type solut allow us defin structur solut avail macopsolutionsdiscretebinarysolution_ type solut within macop packag repres exactli one would wish let see exampl use code python macopsolutionsdiscret import binarysolut solut binarysolutionrandom printsolut result solut obtain code bash binari solut ubqp evalu structur solut mean gener seek evalu need creat new evalu specif problem rel evalu function need maximis mathfxxqxsum_insum_jnq_ijx_ix_j go creat class inherit abstract class macopevaluatorsbaseevaluator_ code python macopevaluatorsbas import evalu class ubqpevaluatorevalu ubqp evalu class enabl comput ubqp solut use specif _data store _data dictionari attritut requir measur comput ubqp solut _dataq matrix size n x n real valu data store numpi array comput method enabl comput associ score given ubqp solut def computeself solut appli comput fit solut arg solut solut ubqp solut instanc return float fit score solut fit index_i val_i enumeratesolutiongetdata index_j val_j enumeratesolutiongetdata fit self_dataqindex_i index_j val_i val_j return fit cost function unconstrain binari quadrat problem well defin tip class propos avail macop packag macopevaluatorsdiscretemonoubqpevaluator_ run algorithm necessari tool avail abl deal problem look solut search space ubqp instanc use local search algorithm alreadi implement macop uncomfort element code follow refer complet macop documentation_ focus concept tool packag code python main import import numpi np modul import macopsolutionsdiscret import binarysolut macopevaluatorsdiscretemono import ubqpevalu macopoperatorsdiscretemut import simplemut simplebinarymut macoppoliciesclass import randompolici macopalgorithmsmono import iteratedlocalsearch il macopalgorithmsmono import hillclimberfirstimprov useful instanc data n ubqp_instance_fil ubqp_instancetxt default valid def validatorsolut return true defin init random solut def init return binarysolutionrandomn valid load ubqp instanc openubqp_instance_fil r f line freadlin get string float point valu matrix q_data join linereplacen line line load concaten obtain string q_matrix npfromstringq_data dtypefloat sep reshapen n printfq_matrix shape q_matrixshap one oper oper simplemut simplebinarymut random polici polici randompolicyoper use load data ubqp instanc evalu ubqpevaluatordataq q_matrix pass global evalu param il hcfi hillclimberfirstimprovmentinit evalu oper polici valid maximisetru verbosetru algo ilsinit evalu oper polici valid localsearchhcfi maximisetru verbosetru run algorithm bestsol algorun ls_evalu printsolut ubqp instanc score formatevaluatorcomputebestsol ubqp problem solv possibl macop remind complet code avail ubqpexamplepy_ file _ubqpexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesubqpexamplepi _document httpsjbuisinegithubiomacop_buildhtmldocument _macopsolutionsdiscretebinarysolut macopmacopsolutionsdiscretehtmlmacopsolutionsdiscretebinarysolut _macopevaluatorsbaseevalu macopmacopevaluatorsbasehtmlmacopevaluatorsbaseevalu _macopevaluatorsdiscretemonoubqpevalu macopmacopevaluatorsdiscretemonohtmlmacopevaluatorsdiscretemonoubqpevalu tour macop imag _staticlogo_macoppng width px align center document allow user wish use macop optimis packag understand work offer exampl implement specif need gradual take major idea develop within macop allow quick develop navig directli via menu avail access specif part document introduct macop python packag solv discret optimis problem natur continu optimis also applic yet develop object allow user exploit basic structur propos packag solv problem specif interest quickli abstract complic relat way evalu compar save progress search good solut rather concentr necessari algorithm inde macop offer follow main basic featur solut represent solut valid constraint program valid function use valid solut data state evalu store problem instanc data implement comput method order evalu solut oper mutat crossov oper updat obtain new solut polici way choos avail oper might use reinforc learn algorithm gener implement optimis research algorithm callback callback automat keep track search space advanc restart previou state ned imag _staticdocumentationmacop_behaviourpng width align center base gener andor implement function user abl quickli develop solut problem retain possibl remain control develop overload exist function necessari problem instanc tutori introduc way use macop run algorithm quickli use well known knapsack problem problem definit knapsack problem problem combinatori optimis given set item weight valu determin number item includ collect total weight less equal given limit total valu larg possibl imag provid illustr problem imag _staticdocumentationknapsack_problempng width align center problem tri optimis valu associ object wish put backpack respect capac bag weight constraint warn combinatori therefor discret problem macop decompos packag two part relat discret optimis one hand continu optimis hand detail later problem implement whole tutori exampl use base previou illustr imag _staticdocumentationproject_knapsack_problempng width align center henc defin problem python worth valu object weight associ object codeblock python problem instanc definit elements_scor worth object elements_weight weight object defin instanc problem need defin represent solut problem let defin simplebinarycrossov oper allow randomli chang binari valu current solut solut repres solut specif problem import optimis process exampl alway use knapsack problem basi first step manag solut macop packag present specif implement current problem detail gener solut insid macopsolutionsbase_ modul macop solut class avail abstract solut class structur store solut data represent data attribut get size shape specif data represent store score solut solut evalu specif method avail caution import thing fit size data function brought edit attribut properti xxxxxsetter decor idea allow user modifi function order chang expect result algorithm regardless data returnedmodifi basic method possibl manag represent solut problem allow initialis randomli use constructor random method evalu evalu method check constraint valid solut isvalid method note one method need specif creat type solut random method depend need problem see defin type solut specif problem solut represent knapsack use abstract solut type avail macopsolutionsbase_ modul order defin solut first let look represent knapsack problem repres solut knapsack solut valid solut shown sum object weight sum select object valu fit imag _staticdocumentationproject_knapsack_solutionpng width align center represent translat binari array valu codeblock select object valu otherwis binari solut defin type solut inherit macopsolutionsbasesolution_ call binarysolut first defin new class inherit function solut child class also implement random method creat new random solut codeblock python modul import macopsolutionsbas import solut import numpi np class binarysolutionsolut staticmethod def randoms validatornon creat binari array specif size use numpi random modul data nprandomrandint sizes initialis new solut use constructor solut binarysolutiondata size check valid set valid return solut tri gener solut solut valid valid provid validatorsolut data nprandomrandint sizes solut binarysolutiondata size return solut note current develop binarysolut avail macopsolutionsdiscretebinarysolution_ macop use new solut represent gener solut randomli codeblock python solut binarysolutionrandom next part see verifi solut meet certain model constraint problem valid solut optimis problem requir respect certain constraint macop allow quickli verifi solut valid base defin function take solut input return valid criterion true fals valid definit invalid solut shown sum object weight greater imag _staticdocumentationproject_knapsack_invalidpng width align center fact invalid solut weight violat knapsack capac constraint avoid take account invalid solut defin function valid solut base problem instanc codeblock python problem instanc definit elements_scor worth object elements_weight weight object valid function definit def validatorsolut weight_sum w enumerateelements_weight add weight current object set weight_sum w solutiondatai valid condit return weight_sum use valid gener solut randomli pass valid function paramet codeblock python problem instanc definit valid function definit ensur valid solut solut binarysolutionrandom valid caution search space valid solut small compar overal search space involv consider time valid solut therefor obtain solut valid solut therefor possibl next part focu evalu solut use evalu possibl gener solut randomli import know valu associ solut speak evalu solut score associ fit gener evalu manag solut gener evalu class macopevaluatorsbaseevaluator_ develop within macop abstract evalu class use comput fit score associ solut evalu solut class store data initialis dictionari attritut requir measur comput solut comput abstract method enabl comput associ score given solut store algo attritut current algorithm use talk algorithm later must therefor creat evalu base propos structur custom evalu creat evalu need data use evalu solut comput fit associ state solut data henc implement specif comput method defin knapsackevalu class therefor allow us evalu solut current problem codeblock python modul import macopevaluatorsbas import evalu class knapsackevaluatorevalu def computeself solut _data contain worth array valu object fit index elem enumeratesolutiondata fit self_dataworthsindex elem return fit possibl initialis new evalu specif data problem instanc codeblock python problem instanc definit elements_scor worth object elements_weight weight object evalu problem instanc evalu knapsackevaluatordataworth elements_scor use defin binarysolut solut binarysolutionrandom obtain current solut score solution_fit solutionevaluateevalu score also store solut solution_fit solutionfit note current develop knapsackevalu avail macopevaluatorsdiscretemonoknapsackevaluator_ macop next part see modifi current solut use modif oper appli oper solut appli oper solut consist modifi current state solut order obtain new one goal find better solut search space oper definit discret optimis literatur categoris oper two section mutat modif one element solut current state crossov inspir darwin theori evolut go two solut gener socal offspr solut compos fusion data parent solut insid macop oper also decompos two categori insid macopoperatorsbase_ gener class oper enabl manag kind oper like evalu oper keep track algorithm use setalgo method link allow better manag way oper must take account state current data relat evolut research mutat crossov class inherit oper appli function requir new oper detail categori oper suggest rel problem mutat oper detail mutat oper consist minimum impact current state solut exampl modif could done problem imag _staticdocumentationproject_knapsack_mutatorpng width align center exampl chang bit valu randomli obtain new solut search space warn appli oper conduct new invalid solut search space modif appli bit swap let defin simplebinarymut oper allow randomli chang binari valu current solut codeblock python modul import macopoperatorsdiscretebas import mutat class simplebinarymutationmut def applyself solut obtain target cell use solut size size solutions cell randomrandint size copi solut copy_solut solutionclon swicth valu copy_solutiondatacel copy_solutiondatacel els copy_solutiondatacel return new obtain solut return copy_solut instanci new oper order obtain new solut codeblock python binarymut instanc mutat simplebinarymut use defin binarysolut solut binarysolutionrandom obtain new solut use oper new_solut mutatorapplysolut note develop simplebinarymut avail macopoperatorsdiscretemutatorssimplebinarymutation_ macop crossov oper inspir darwin theori evolut crossov start two solut gener socal offspr solut compos fusion data parent solut imag _staticdocumentationproject_knapsack_crossoverpng width align center exampl merg two solut specif split criterion order obtain offspr implement simplecrossov crossov oper merg data two solut first half solut save ad second half solut gener new solut offspr codeblock python modul import macopoperatorsdiscretebas import crossov class simplecrossovercrossov def applyself solut solut size solutions default split index use splitindex intsiz copi data solut firstdata solutiondatacopi copi solut copy_solut solutionclon copy_solutiondatasplitindex firstdatasplitindex return copy_solut use crossov oper creat gener new solut exampl use codeblock python simplecrossov instanc crossov simplecrossov use defin binarysolut solut binarysolutionrandom solut binarysolutionrandom obtain new solut use crossov offspr crossoverapplysolut solut tip develop simplecrossov avail macopoperatorsdiscretecrossoverssimplecrossover_ macop howev choic halv merg data made randomli next part introduc polici featur macop enabl choos next oper appli search process base specif criterion oper choic polici featur macop enabl choos next oper appli search process algorithm base specif criterion use polici sometim natur problem instanc strongli influenc search result use mutat oper crossov autom oper choic strategi also develop literatur notabl base reinforc learn oper choic problem seen desir find best solut gener oper next evalu conduc precis improv solut imag _staticdocumentationoperators_choicepng width align center note implement use reinforc learn develop exampl macoppoliciesreinforcement_ modul howev detail refer api document detail custom polici case go exploit complex enough implement polici simpli use random choic oper first let take look polici abstract class avail macoppoliciesbase_ polici instanc oper attribut order keep track possibl oper select one implement need specifi select abstract method appli method select next oper return new solut codeblock python modul import macoppoliciesbas import polici class randompolicypolici def selectself select specif oper choos oper randomli index randomrandint lenselfoper return selfoperatorsindex use oper choic polici updat current solut codeblock python oper instanc mutat simplemut crossov simplecrossov randompolici instanc polici randompolicymut crossov current solut instanc solut binarysolutionrandom solut binarysolutionrandom pass two solut paramet case select crossov oper new_solut policyapplysolut solut caution default solut paramet provid policyappli method crossov best solut known use algorithm link polici updat solut therefor possibl polici high time dive process optim solut dig research space optimis process let us tackl interest part concern search optimum solut research space find local global optima overal optim process seek find best best solut minim maxim object function fit score obtain order respond problem imag _staticdocumentationsearch_spacepng width align center sometim search space simpl local search provid access global optimum shown figur case search space complex may necessari explor rather exploit order get convex zone find global optimum local opmatim solut problem illustr figur b abstract algorithm class abstract class propos within macop gener manag algorithm therefor heurist locat macopalgorithmsbase_ modul pay attent differ method compos class enabl manag common usag oper research algorithm initi function solut valid function check solut valid base criteria evalu function give fit score solut oper use order updat solut search process polici process appli choos next oper appli callback function order rel stuff everi number evalu reload algorithm state parent algorithm associ new algorithm instanc hierarchi manag compos default attribut initialis function basic function strategi initialis solut evalu classmacopevaluatorsbaseevalu evalu instanc order obtain fit mono multipl object oper classmacopoperatorsbaseoper list oper use launch algorithm polici classmacoppoliciesbasepolici polici instanc strategi select oper valid function basic function check solut valid constraint maximis bool specifi kind optimis problem verbos bool verbos inform algorithm currentsolut classmacopsolutionsbasesolut current solut manag current evalu comparison bestsolut classmacopsolutionsbasesolut best solut found far run algorithm callback classmacopcallbacksbasecallback list callback class implement instruct everi number evalu load initialis algorithm parent classmacopalgorithmsbasealgorithm parent algorithm refer case inner algorithm instanc option caution import thing result function brought edit attribut properti resultsett decor idea allow user modifi function order chang expect result algorithm regardless data returnedmodifi notion hierarchi algorithm introduc inde certain depend algorithm method increaseevalu getglobalevalu getglobalmaxevalu ensur expect global number evalu correctli manag like stop method search stop criterion evalu updat isbett use lot look solut search space particular updat function call polici instanc gener new valid solut isbett method also overload especi algorithm take account singl solut verifi verif via popul exampl initrun method specifi way intialis algorithm bestsolut currentsolut exampl algorithm alreadi initialis note initrun method also use intialis popul solut instead one best solut want manag genet algorithm import part run method abstract run method initialis current number evalu algorithm base parent algorithm inner algorithm alway mandatori call parent class run method use superrunevalu use evalu paramet number evalu budget run process continu find solut search space warn method addcallback resum progress detail next part focus notion callback local search algorithm go carri first local search algorithm within search space local search consist start solut appli mutat crossov oper order obtain new one new solut evalu retain better speak notion neighborhood explor process complet way local search end certain number evalu best evalu solut obtain return let implement algorithm well known name hill climber best improv inherit mother algorithm class name hillclimberbestimprov codeblock python modul import macopalgorithmsbas import algorithm class hillclimberbestimprovmentalgorithm def runself evalu run local search algorithm default use mother method initialis variabl superrunevalu initialis current solut best solut selfinitrun solutions self_currentsolutions local search algorithm implement selfstop _ rangesolutions updat current solut use polici newsolut selfupdateself_currentsolut better solut current replac selfisbetternewsolut self_bestsolut newsolut increas number evalu selfincreaseevalu stop algorithm necessari selfstop break set new current solut use best solut found neighbor search self_currentsolut self_bestsolut return self_bestsolut algorithm readi work previous let us defin two oper well random choic strategi also need defin solut initialis function algorithm gener new solut codeblock python problem instanc definit elements_scor worth object elements_weight weight object evalu instanc evalu knapsackevaluatordataworth elements_scor valid instanc use lambda valid lambda solut sum elements_weighti solutiondatai rangelensolutiondata initialis instanc use lambda default param valu initialis lambda x binarysolutionrandomx valid oper list crossov mutat oper simplecrossov simplemut polici random instanc polici randompolicyoper maxim algorithm rel knapsack problem algo hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals run algorithm get solut found solut algorun printsolutionfit note verbos algorithm paramet log consol advanc process algorithm set true default valu exploratori algorithm explain figur b section sometim search space complic due convex part need heurist strategi rather simpl local search way counter problem allow algorithm exit exploit phase offer local search rather seek explor part research space possibl simpli carri sever local search budget number evalu idea make leap search space order find new local optimum global optimum explain process illustr imag _staticdocumentationsearch_space_simplepng width align center go implement specif algorithm allow take new paramet input local search one previous develop modifi constructor littl let call new algorithm iteratedlocalsearch codeblock python modul import macopalgorithmsbas import algorithm class iteratedlocalsearchalgorithm def __init__self initialis evalu oper polici valid localsearch maximisetru parentnon verbosetru super__init__initialis evalu oper polici valid maximis parent verbos specif local search associ current algorithm self_localsearch localsearch need attach current algorithm parent self_localsearchsetparentself def runself evalu ls_evalu run iter local search algorithm use local search default use mother method initialis variabl superrunevalu initialis current solut selfinitrun local search algorithm implement selfstop creat search solut local search stop method call insid local search newsolut self_localsearchrunls_evalu better solut current replac selfisbetternewsolut self_bestsolut newsolut selfinform return self_bestsolut initi phase attach local search pass paramet current algorithm parent goal touch keep track overal search evalu number rel parent algorithm use local search run method allow better search solut codeblock python problem instanc definit elements_scor worth object elements_weight weight object evalu instanc evalu knapsackevaluatordataworth elements_scor valid instanc use lambda valid lambda solut sum elements_weighti solutiondatai rangelensolutiondata initialis instanc use lambda default param valu initialis lambda x binarysolutionrandomx valid oper list crossov mutat oper simplecrossov simplemut polici random instanc polici randompolicyoper maxim algorithm rel knapsack problem localsearch hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals algo iteratedlocalsearchinitialis evalu oper polici valid localsearchlocal_search maximisetru verbosefals run algorithm use local search get solut found solut algorunevalu ls_evalu printsolutionfit note two last algorithm develop avail librari within modul macopalgorithmsmono_ one final featur explor next part notion callback keep track keep track run algorithm use two level first understand unfold end classic run also case unwant shutdown algorithm section allow introduc recoveri algorithm thank continu backup function log algorithm log retriev run algorithm macop use log python packag order log algorithm advanc exampl use run algorithm codeblock python basic import import log log configur loggingbasicconfigformatasctim messag filenamedataexamplelog levelloggingdebug maxim algorithm rel knapsack problem algo hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals run algorithm use local search get solut found solut algorunevalu printsolutionfit henc log data save dataexamplelog exampl callback introduct output log help understand error occur howev progress research carri may lost function relat callback develop within macop callback specif instanc macopcallbacksbasecallback_ allow perform action trace save inform everi n evalu also reload inform necessari restart algorithm run method call run process algo backup specif number evalu load method use reload state algorithm last inform save save data save file whose name specifi user toward use callback go creat callback instanc call basiccheckpoint save best solut found number evalu done order reload next run algorithm codeblock python modul import macopcallbacksbas import callback class basiccheckpointcallback def runself check necessari backup base everi variabl get current best solut solut selfalgo_bestsolut currentevalu selfalgogetglobalevalu backup necessari everi number evalu currentevalu self_everi creat specif line solut data solutiondata solutions lensolutiondata index val enumeratesolutiondata solutiondata strval index solutions solutiondata number evalu done solut data fit score line strcurrentevalu solutiondata str solutionfit n check file exist ospathexistsself_filepath openself_filepath w f fwritelin els openself_filepath f fwritelin def loadself load last backup line set algorithm state best solut evalu ospathexistsself_filepath openself_filepath f get last line read data lastlin freadlin data lastlinesplit get evalu inform globalevalu intdata restor number evalu selfalgogetpar none selfalgogetparent_numberofevalu globalevalu els selfalgo_numberofevalu globalevalu get best solut data inform solutiondata listmapint datasplit avoid uninitialis solut selfalgo_bestsolut none selfalgo_bestsolut selfalgoinitialis set algorithm lastest obtain best solut selfalgo_bestsolutiondata nparraysolutiondata selfalgo_bestsolution_scor floatdata way possibl specifi use callback algorithm instanc codeblock python maxim algorithm rel knapsack problem algo hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals callback basiccheckpointeveri filepathdatahillclimberbackupcsv add callback callback list algoaddcallbackcallback run algorithm use local search get solut found solut algorunevalu printsolutionfit note possibl add mani callback desir algorithm question previous method abstract algorithm class present method link use callback particular addcallback method allow addit callback algorithm instanc seen resum method reload callback list use load method progress method run callback algorithm search want exploit function need exploit within algorithm let make necessari modif algorithm iteratedlocalsearch codeblock python modul import macopalgorithmsbas import algorithm class iteratedlocalsearchalgorithm def runself evalu ls_evalu run iter local search algorithm use local search default use mother method initialis variabl superrunevalu initialis current solut selfinitrun restart use callback backup list selfresum local search algorithm implement selfstop creat search solut local search newsolut self_localsearchrunls_evalu better solut current replac selfisbetternewsolut self_bestsolut newsolut check necessari call callback selfprogress selfinform return self_bestsolut featur macop present next section aim quickli present implement propos within macop highlight modul packag advanc usag multiobject discret optimis within api macop find implement multiobject evolutionari algorithm base decomposit moead generalpurpos algorithm approxim pareto set multiobject optim problem decompos origin multiobject problem number singleobject optim subproblem use evolutionari process optim subproblem simultan cooper moead stateofart algorithm aggregationbas approach multiobject optim imag _staticdocumentationsearch_space_moeadpng width align center illustr two main object subdivis singleobject optim subproblem order find pareto front macopalgorithmsmultimosubproblem_ class defin subproblem moead macopalgorithmsmultimoead_ class exploit mosubproblem implement moead use weightedsum object method exampl moead knapsack problem avail knapsackmultiexamplepy_ _knapsackmultiexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesknapsackmultiexamplepi continu zdt problem even packag primarili intend continu optimis allow adapt continu optimis base zdt_ benchmark function offer implement solut oper evalu enabl optimis kind problem _zdt httpsenwikipediaorgwikitest_functions_for_optim macopsolutionscontinuouscontinuoussolution_ manag float array solut order repres continu solut macopoperatorscontinuousmutatorspolynomialmutation_ updat solut use polynomi mutat solut data macopoperatorscontinuouscrossoversbasicdifferentialevolutioncrossover_ use new gener solut order obtain new offspr solut macopevaluatorscontinousmonozdtevaluator_ continu evalu zdt problem instanc take data f zdt function macopcallbacksclassicalscontinuouscallback_ manag callback backup continu solut complet implement exampl rosenbrock_ function avail _macopalgorithmsbas macopmacopalgorithmsbasehtmlmodulemacopalgorithmsbas _macopalgorithmsmono macopmacopalgorithmsmonohtmlmodulemacopalgorithmsmono _macopsolutionsbas macopmacopsolutionsbasehtmlmodulemacopsolutionsbas _macopsolutionsbasesolut macopmacopsolutionsbasehtmlmacopsolutionsbasesolut _macopsolutionsdiscretebinarysolut macopmacopsolutionsdiscretehtmlmacopsolutionsdiscretebinarysolut _macopevaluatorsbaseevalu macopmacopevaluatorsbasehtmlmacopevaluatorsbaseevalu _macopevaluatorsdiscretemonoknapsackevalu macopmacopevaluatorsdiscretemonohtmlmacopevaluatorsdiscretemonoknapsackevalu _macopoperatorsbas macopmacopoperatorsbasehtmlmodulemacopoperatorsbas _macopoperatorsdiscretemutatorssimplebinarymut macopmacopoperatorsdiscretemutatorshtmlmacopoperatorsdiscretemutatorssimplebinarymut _macopoperatorsdiscretecrossoverssimplecrossov macopmacopoperatorsdiscretecrossovershtmlmacopoperatorsdiscretecrossoverssimplecrossov _macoppoliciesreinforc macopmacoppoliciesreinforcementhtmlmodulemacoppoliciesreinforc _macoppoliciesbas macopmacoppoliciesbasehtmlmodulemacoppoliciesbas _macopcallbacksbasecallback macopmacopcallbacksbasehtmlmacopcallbacksbasecallback _macopalgorithmsmultimosubproblem macopmacopalgorithmsmultihtmlmacopalgorithmsmultimosubproblem _macopalgorithmsmultimoead macopmacopalgorithmsmultihtmlmacopalgorithmsmultimoead _macopsolutionscontinuouscontinuoussolut macopmacopsolutionscontinuoushtmlmacopsolutionscontinuouscontinuoussolut _macopoperatorscontinuousmutatorspolynomialmut macopmacopoperatorscontinuousmutatorshtmlmacopoperatorscontinuousmutatorspolynomialmut _macopoperatorscontinuouscrossoversbasicdifferentialevolutioncrossov macopmacopoperatorscontinuouscrossovershtmlmacopoperatorscontinuouscrossoversbasicdifferentialevolutioncrossov _macopevaluatorscontinousmonozdtevalu macopmacopevaluatorscontinuousmonohtmlmacopevaluatorscontinousmonozdtevalu _macopcallbacksclassicalscontinuouscallback macopmacopcallbacksclassicalshtmlmacopcallbacksclassicalscontinuouscallback _rosenbrock httpsgithubcomjbuisinemacopblobmasterexampleszdtexamplepyapi modul descript macop offer follow main basic featur algorithm gener implement optimis research algorithm callback callback automat keep track search space advanc restart previou state ned evalu store problem instanc data implement comput method order evalu solut oper mutat crossov oper updat obtain new solut polici way choos avail oper might use reinforc learn solut represent solut valid constraint program valid function use valid solut data state common base modul modul present section common type optimis problem abstract class propos form basi packag structur macopalgorithm autosummari toctre macop macopalgorithmsbas macopalgorithmsmono macopalgorithmsmulti macopcallback autosummari toctre macop macopcallbacksbas macopcallbacksclass macopcallbacksmulti macopcallbackspolici macopevalu autosummari toctre macop macopevaluatorsbas macopoper autosummari toctre macop macopoperatorsbas macoppolici autosummari toctre macop macoppoliciesbas macoppoliciesclass macoppoliciesreinforc macopsolut autosummari toctre macop macopsolutionsbas macoputil autosummari toctre macop macoputilsprogress discret optimis implement discret optimis problem function avail use exampl implement simpli use user macopevalu autosummari toctre macop macopevaluatorsdiscretemono macopevaluatorsdiscretemulti macopoper autosummari toctre macop macopoperatorsdiscretemut macopoperatorsdiscretecrossov macopsolut autosummari toctre macop macopsolutionsdiscret continu optimis although continu optim prioriti packag idea leav possibl user implement even propos implement relat kind problem modul moment nearli empti zdt function exampl present establish structur rel type implement user wish propos develop ad futur version packag refer guidelines_ contribut packag _guidelin httpsgithubcomprisedmacopblobmastercontributingmd macopevalu autosummari toctre macop macopevaluatorscontinuousmono macopevaluatorscontinuousmulti macopoper autosummari toctre macop macopoperatorscontinuousmut macopoperatorscontinuouscrossov macopsolut autosummari toctre macop macopsolutionscontinuousmacopoperatorscontinuousmut automodul macopoperatorscontinuousmut macopevaluatorscontinuousmono automodul macopevaluatorscontinuousmono rubric class autosummari zdtevalu macopsolutionsdiscret automodul macopsolutionsdiscret rubric class autosummari binarysolut combinatoryintegersolut integersolut macopalgorithmsmulti automodul macopalgorithmsmulti rubric class autosummari moead mosubproblem macopcallbacksmulti automodul macopcallbacksmulti rubric class autosummari multicheckpoint paretocheckpoint macopevaluatorsbas automodul macopevaluatorsbas rubric class autosummari evalu macopcallbacksclass automodul macopcallbacksclass rubric class autosummari basiccheckpoint macoppoliciesbas automodul macoppoliciesbas rubric class autosummari polici macopcallbacksbas automodul macopcallbacksbas rubric class autosummari callback macopcallbackspolici automodul macopcallbackspolici rubric class autosummari ucbcheckpoint macopoperatorscontinuouscrossov automodul macopoperatorscontinuouscrossov macopevaluatorsdiscretemono automodul macopevaluatorsdiscretemono rubric class autosummari knapsackevalu macopoperatorsdiscretecrossov automodul macopoperatorsdiscretecrossov rubric class autosummari randomsplitcrossov simplecrossov macopalgorithmsbas automodul macopalgorithmsbas rubric class autosummari algorithm macopsolutionscontinu automodul macopsolutionscontinu macoppoliciesreinforc automodul macoppoliciesreinforc rubric class autosummari ucbpolici macoppoliciesclass automodul macoppoliciesclass rubric class autosummari randompolici macoputilsprogress automodul macoputilsprogress rubric function autosummari macop_lin macop_progress macop_text rubric class autosummari color macopoperatorsdiscretemut automodul macopoperatorsdiscretemut rubric class autosummari simplebinarymut simplemut macopevaluatorsdiscretemulti automodul macopevaluatorsdiscretemulti rubric class autosummari weightedsum macopoperatorsbas automodul macopoperatorsbas rubric class autosummari crossov kindoper mutat oper macopevaluatorscontinu automodul macopevaluatorscontinu macopsolutionsbas automodul macopsolutionsbas rubric class autosummari solut macopevaluatorscontinuousmulti automodul macopevaluatorscontinuousmulti macopalgorithmsmono automodul macopalgorithmsmono rubric class autosummari hillclimberbestimprov hillclimberfirstimprov iteratedlocalsearch problem instanc tutori introduc way use macop run algorithm quickli use well known knapsack problem problem definit knapsack problem problem combinatori optimis given set item weight valu determin number item includ collect total weight less equal given limit total valu larg possibl imag provid illustr problem imag _staticdocumentationknapsack_problempng width align center problem tri optimis valu associ object wish put backpack respect capac bag weight constraint warn combinatori therefor discret problem macop decompos packag two part relat discret optimis one hand continu optimis hand detail later problem implement whole tutori exampl use base previou illustr imag _staticdocumentationproject_knapsack_problempng width align center henc defin problem python worth valu object weight associ object codeblock python problem instanc definit elements_scor worth object elements_weight weight object defin instanc problem need defin represent solut problem let defin simplebinarycrossov oper allow randomli chang binari valu current solutionkeep track keep track run algorithm use two level first understand unfold end classic run also case unwant shutdown algorithm section allow introduc recoveri algorithm thank continu backup function log algorithm log retriev run algorithm macop use log python packag order log algorithm advanc exampl use run algorithm codeblock python basic import import log log configur loggingbasicconfigformatasctim messag filenamedataexamplelog levelloggingdebug maxim algorithm rel knapsack problem algo hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals run algorithm use local search get solut found solut algorunevalu printsolutionfit henc log data save dataexamplelog exampl callback introduct output log help understand error occur howev progress research carri may lost function relat callback develop within macop callback specif instanc macopcallbackscallback allow perform action trace save inform everi n evalu also reload inform necessari restart algorithm codeblock python class callback def __init__self everi filepath abstractmethod def runself check necessari backup base everi variabl pass abstractmethod def loadself load last backup line solut set algorithm state backup pass def setalgoself algo specifi main algorithm instanc refer run method call run process algo backup specif number evalu load method use reload state algorithm last inform save save data save file whose name specifi user toward use callback go creat callback instanc call basiccheckpoint save best solut found number evalu done order reload next run algorithm codeblock python modul import macopcallbacksbas import callback class basiccheckpointcallback def runself check necessari backup base everi variabl get current best solut solut selfalgo_bestsolut currentevalu selfalgogetglobalevalu backup necessari everi number evalu currentevalu self_everi creat specif line solut data solutiondata solutions lensolutiongetdata index val enumeratesolutiongetdata solutiondata strval index solutions solutiondata number evalu done solut data fit score line strcurrentevalu solutiondata str solutionfit n check file exist ospathexistsself_filepath openself_filepath w f fwritelin els openself_filepath f fwritelin def loadself load last backup line set algorithm state best solut evalu ospathexistsself_filepath openself_filepath f get last line read data lastlin freadlin data lastlinesplit get evalu inform globalevalu intdata restor number evalu selfalgogetpar none selfalgogetparent_numberofevalu globalevalu els selfalgo_numberofevalu globalevalu get best solut data inform solutiondata listmapint datasplit avoid uninitialis solut selfalgo_bestsolut none selfalgo_bestsolut selfalgoinitialis set algorithm lastest obtain best solut selfalgo_bestsolutiongetdata nparraysolutiondata selfalgo_bestsolution_scor floatdata way possibl specifi use callback algorithm instanc codeblock python maxim algorithm rel knapsack problem algo hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals callback basiccheckpointeveri filepathdatahillclimberbackupcsv add callback callback list algoaddcallbackcallback run algorithm use local search get solut found solut algorunevalu printsolutionfit note possibl add mani callback desir algorithm question previous method abstract algorithm class present method link use callback particular addcallback method allow addit callback algorithm instanc seen resum method reload callback list use load method progress method run callback algorithm search want exploit function need exploit within algorithm let make necessari modif algorithm iteratedlocalsearch codeblock python modul import macopalgorithmsbas import algorithm class iteratedlocalsearchalgorithm def runself evalu ls_evalu run iter local search algorithm use local search default use mother method initialis variabl superrunevalu initialis current solut selfinitrun restart use callback backup list selfresum local search algorithm implement selfstop creat search solut local search newsolut self_localsearchrunls_evalu better solut current replac selfisbetternewsolut self_bestsolut newsolut check necessari call callback selfprogress selfinform return self_bestsolut featur macop present next section aim quickli present implement propos within macop highlight modul packagevalid solut optimis problem requir respect certain constraint macop allow quickli verifi solut valid base defin function take solut input return valid criterion true fals valid definit invalid solut shown sum object weight greater imag _staticdocumentationproject_knapsack_invalidpng width align center fact invalid solut weight violat knapsack capac constraint avoid take account invalid solut defin function valid solut base problem instanc codeblock python problem instanc definit elements_scor worth object elements_weight weight object valid function definit def validatorsolut weight_sum w enumerateelements_weight add weight current object set weight_sum w solutiongetdata valid condit return weight_sum use valid gener solut randomli pass valid function paramet codeblock python problem instanc definit valid function definit ensur valid solut solut binarysolutionrandom valid caution search space valid solut small compar overal search space involv consider time valid solut therefor obtain solut valid solut therefor possibl next part focu evalu solutionoper choic polici featur macop enabl choos next oper appli search process algorithm base specif criterion use polici sometim natur problem instanc strongli influenc search result use mutat oper crossov autom oper choic strategi also develop literatur notabl base reinforc learn oper choic problem seen desir find best solut gener oper next evalu conduc precis improv solut imag _staticdocumentationoperators_choicepng width align center note implement use reinforc learn develop exampl macoppoliciesreinforc modul howev detail refer api document detail custom polici case go exploit complex enough implement polici simpli use random choic oper first let take look polici abstract class avail macoppoliciesbas codeblock python class polici def __init__self oper selfoper oper abstractmethod def selectself select specif oper pass def applyself solut appli specif oper creat new solut comput fit return def setalgoself algo keep polici refer whole algorithm polici instanc oper attribut order keep track possibl oper select one implement need specifi select abstract method appli method select next oper return new solut codeblock python modul import macoppoliciesbas import polici class randompolicypolici def selectself select specif oper choos oper randomli index randomrandint lenselfoper return selfoperatorsindex use oper choic polici updat current solut codeblock python oper instanc mutat simplemut crossov simplecrossov randompolici instanc polici randompolicymut crossov current solut instanc solut binarysolutionrandom solut binarysolutionrandom pass two solut paramet case select crossov oper new_solut policyapplysolut solut caution default solut paramet provid policyappli method crossov best solut known use algorithm link polici updat solut therefor possibl polici high time dive process optim solut dig research spaceus evalu possibl gener solut randomli import know valu associ solut speak evalu solut score associ fit gener evalu manag solut gener evalu class macopevaluatorsbaseevalu develop within macop abstract evalu class use comput fit score associ solut evalu solut class store _data dictionari attritut requir measur comput solut comput abstract method enabl comput associ score given solut store algo attritut current algorithm use talk algorithm later codeblock python class evalu abstract evalu class enabl comput solut use specif _data def __init__self data self_data data abstractmethod def computeself solut appli comput fit solut pass def setalgoself algo keep evalu refer whole algorithm selfalgo algo must therefor creat evalu base propos structur custom evalu creat evalu need data use evalu solut calcul score fit associ state solut data henc implement specif comput method defin knapsackevalu class therefor allow us evalu solut current problem codeblock python modul import macopevaluatorsbas import evalu class knapsackevaluatorevalu def computesolut _data contain worth array valu object fit index elem enumeratesolutiongetdata fit self_dataworthsindex elem return fit possibl initialis new evalu specif data problem instanc codeblock python problem instanc definit elements_scor worth object elements_weight weight object evalu problem instanc evalu knapsackevaluatordataworth elements_scor use defin binarysolut solut binarysolutionrandom obtain current solut score solution_fit solutionevaluateevalu score also store solut solution_fit solutionfit note current develop knapsackevalu avail macopevaluatorsmonoknapsackevalu macop next part see modifi current solut use modif operatora tour macop imag _staticlogo_macoppng width px align center document allow user wish use macop optimis packag understand work offer exampl implement specif need gradual take major idea develop within macop allow quick develop navig directli via menu avail access specif part document toctre maxdepth number caption content introduct problem solut valid evalu oper polici algorithm callback othersoptimis process let us tackl interest part concern search optimum solut research space find local global optima overal optim process seek find best best solut minim maxim object function fit score obtain order respond problem imag _staticdocumentationsearch_spacepng width align center sometim search space simpl local search provid access global optimum shown figur case search space complex may necessari explor rather exploit order get convex zone find global optimum local opmatim solut problem illustr figur b abstract algorithm class abstract class propos within macop gener manag algorithm therefor heurist locat macopalgorithmsbas modul pay attent differ method compos class enabl manag common usag oper research algorithm initi function solut valid function check solut valid base criteria evalu function give fit score solut oper use order updat solut search process polici process appli choos next oper appli callback function order rel stuff everi number evalu reload algorithm state parent algorithm associ new algorithm instanc hierarchi manag compos default attribut initialis function basic function strategi initialis solut evalu evalu evalu instanc order obtain fit mono multipl object oper oper list oper use launch algorithm polici polici polici instanc strategi select oper valid function basic function check solut valid constraint maximis bool specifi kind optimis problem verbos bool verbos inform algorithm currentsolut solut current solut manag current evalu comparison bestsolut solut best solut found far run algorithm callback callback list callback class implement instruct everi number evalu load initialis algorithm parent algorithm parent algorithm refer case inner algorithm instanc option codeblock python class algorithm def __init__self initialis evalu oper polici valid maximisetru parentnon verbosetru def addcallbackself callback add new callback algorithm specifi useful paramet def resumeself resum algorithm use callback instanc def getparentself recurs find main parent algorithm attach current algorithm def setparentself parent set parent algorithm current algorithm def initrunself initialis current solut best solut use initialis function def increaseevaluationself increas number evalu solut evalu depend algorithm parent hierarchi def getglobalevaluationself get global number evalu inner algorithm def getglobalmaxevaluationself get global max number evalu inner algorithm def stopself global stop criteria check parent algorithm hierarchi def evaluateself solut evalu solut use evalu pass intial algorithm def updateself solut appli updat function solut use specif polici check solut valid modif return def isbetterself solut check solut better best found def runself evalu run specif algorithm follow number evalu find optima def progressself log progress appli callback necessari notion hierarchi algorithm introduc inde certain depend algorithm method increaseevalu getglobalevalu getglobalmaxevalu ensur expect global number evalu correctli manag like stop method search stop criterion evalu updat isbett use lot look solut search space particular updat function call polici instanc gener new valid solut isbett method also overload especi algorithm take account singl solut verifi verif via popul exampl initrun method specifi way intialis algorithm bestsolut currentsolut exampl algorithm alreadi initialis note initrun method also use intialis popul solut instead one best solut want manag genet algorithm import part run method abstract run method initialis current number evalu algorithm base parent algorithm inner algorithm alway mandatori call parent class run method use superrunevalu use evalu paramet number evalu budget run process continu find solut search space warn method addcallback resum progress detail next part focus notion callback local search algorithm go carri first local search algorithm within search space local search consist start solut appli mutat crossov oper order obtain new one new solut evalu retain better speak notion neighborhood explor process complet way local search end certain number evalu best evalu solut obtain return let implement algorithm well known name hill climber best improv inherit mother algorithm class name hillclimberbestimprov codeblock python modul import macopalgorithmsbas import algorithm class hillclimberbestimprovmentalgorithm def runself evalu run local search algorithm default use mother method initialis variabl superrunevalu initialis current solut best solut selfinitrun solutions self_currentsolutions local search algorithm implement selfstop _ rangesolutions updat current solut use polici newsolut selfupdateself_currentsolut better solut current replac selfisbetternewsolut self_bestsolut newsolut increas number evalu selfincreaseevalu stop algorithm necessari selfstop break set new current solut use best solut found neighbor search self_currentsolut self_bestsolut return self_bestsolut algorithm readi work previous let us defin two oper well random choic strategi also need defin solut initialis function algorithm gener new solut codeblock python problem instanc definit elements_scor worth object elements_weight weight object evalu instanc evalu knapsackevaluatordataworth elements_scor valid instanc use lambda valid lambda solut sum elements_weighti solutiongetdata rangelensolutiongetdata initialis instanc use lambda default param valu initialis lambda x binarysolutionrandomx valid oper list crossov mutat oper simplecrossov simplemut polici random instanc polici randompolicyoper maxim algorithm rel knapsack problem algo hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals run algorithm get solut found solut algorun printsolutionfit note verbos algorithm paramet log consol advanc process algorithm set true default valu exploratori algorithm explain figur b section sometim search space complic due convex part need heurist strategi rather simpl local search way counter problem allow algorithm exit exploit phase offer local search rather seek explor part research space possibl simpli carri sever local search budget number evalu idea make leap search space order find new local optimum global optimum explain process illustr imag _staticdocumentationsearch_space_simplepng width align center go implement specif algorithm allow take new paramet input local search one previous develop modifi constructor littl let call new algorithm iteratedlocalsearch codeblock python modul import macopalgorithmsbas import algorithm class iteratedlocalsearchalgorithm def __init__self initialis evalu oper polici valid localsearch maximisetru parentnon verbosetru super__init__initialis evalu oper polici valid maximis parent verbos specif local search associ current algorithm self_localsearch localsearch need attach current algorithm parent self_localsearchsetparentself def runself evalu ls_evalu run iter local search algorithm use local search default use mother method initialis variabl superrunevalu initialis current solut selfinitrun local search algorithm implement selfstop creat search solut local search stop method call insid local search newsolut self_localsearchrunls_evalu better solut current replac selfisbetternewsolut self_bestsolut newsolut selfinform return self_bestsolut initi phase attach local search pass paramet current algorithm parent goal touch keep track overal search evalu number rel parent algorithm use local search run method allow better search solut codeblock python problem instanc definit elements_scor worth object elements_weight weight object evalu instanc evalu knapsackevaluatordataworth elements_scor valid instanc use lambda valid lambda solut sum elements_weighti solutiongetdata rangelensolutiongetdata initialis instanc use lambda default param valu initialis lambda x binarysolutionrandomx valid oper list crossov mutat oper simplecrossov simplemut polici random instanc polici randompolicyoper maxim algorithm rel knapsack problem localsearch hillclimberbestimprovmentinitialis evalu oper polici valid maximisetru verbosefals algo iteratedlocalsearchinitialis evalu oper polici valid localsearchlocal_search maximisetru verbosefals run algorithm use local search get solut found solut algorunevalu ls_evalu printsolutionfit note two last algorithm develop avail librari within modul maocpalgorithmsmono one final featur explor next part notion callbackintroduct macop python packag solv discret optimis problem natur continu optimis also applic yet develop object allow user exploit basic structur propos packag solv problem specif interest quickli abstract complic relat way evalu compar save progress search good solut rather concentr necessari algorithm inde macop offer follow main basic featur solut represent solut valid constraint program valid function use valid solut data state evalu store problem instanc data implement comput method order evalu solut oper mutat crossov oper updat obtain new solut polici way choos avail oper might use reinforc learn algorithm gener implement optimis research algorithm callback callback automat keep track search space advanc restart previou state ned imag _staticdocumentationmacop_behaviourpng width align center base gener andor implement function user abl quickli develop solut problem retain possibl remain control develop overload exist function necessarysolut repres solut specif problem import optimis process exampl alway use knapsack problem basi first step manag solut macop packag present specif implement current problem detail gener solut insid macopsolutionsbas modul macop solut class avail abstract solut class structur store solut data represent data attribut get size shape specif data represent store score solut solut evalu specif method avail codeblock python class solut def __init__self data size abstract solut class constructor def isvalidself valid use custom function check solut valid def evaluateself evalu evalu solut use specif evalu def fitnessself return fit score staticmethod def randoms validatornon initialis solut use random data valid def cloneself clone current solut data without keep evalu _score basic method possibl manag represent solut problem allow initialis randomli use constructor random method evalu evalu method check constraint valid solut isvalid method note one method need specif creat type solut random method depend need problem see defin type solut specif problem solut represent knapsack use abstract solut type avail macopsolutionsbas modul order defin solut first let look represent knapsack problem repres solut knapsack solut valid solut shown sum object weight sum select object valu fit imag _staticdocumentationproject_knapsack_solutionpng width align center represent translat binari array valu codeblock select object valu otherwis binari solut defin type solut inherit macopsolutionsbasesolut call binarysolut first defin new class inherit function solut child class also implement random method creat new random solut codeblock python modul import macopsolutionsbas import solut import numpi np class binarysolutionsolut staticmethod def randoms validatornon creat binari array specif size use numpi random modul data nprandomrandint sizes initialis new solut use constructor solut binarysolutiondata size check valid set valid return solut tri gener solut solut valid valid provid validatorsolut data nprandomrandint sizes solut binarysolutiondata size return solut note current develop binarysolut avail macopsolutionsdiscretebinarysolut macop use new solut represent gener solut randomli codeblock python solut binarysolutionrandom next part see verifi solut meet certain model constraint problemappli oper solut appli oper solut consist modifi current state solut order obtain new one goal find better solut search space oper definit discret optimis literatur categoris oper two section mutat modif one element solut current state crossov inspir darwin theori evolut go two solut gener socal offspr solut compos fusion data parent solut insid macop oper also decompos two categori insid macopoperatorsdiscretebas gener class oper enabl manag kind oper codeblock python class oper abstract oper class enabl updat solut appli oper comput abstractmethod def __init__self pass abstractmethod def applyself solut appli current oper transform pass def setalgoself algo keep oper refer whole algorithm selfalgo algo like evalu oper keep track algorithm use setalgo method link allow better manag way oper must take account state current data relat evolut research mutat crossov class inherit oper appli function requir new oper codeblock python class mutationoper abstract mutat extend oper attribut kind kindoper specifi kind oper def __init__self self_kind kindoperatormut def applyself solut rais notimplementederror class crossoveroper abstract crossov extend oper attribut kind kindoper specifi kind oper def __init__self self_kind kindoperatorcrossov def applyself solut solut rais notimplementederror detail categori oper suggest rel problem mutat oper detail mutat oper consist minimum impact current state solut exampl modif could done problem imag _staticdocumentationproject_knapsack_mutatorpng width align center exampl chang bit valu randomli obtain new solut search space warn appli oper conduct new invalid solut search space modif appli bit swap let defin simplebinarymut oper allow randomli chang binari valu current solut codeblock python modul import macopoperatorsdiscretebas import mutat class simplebinarymutationmut def applyself solut obtain target cell use solut size size solutions cell randomrandint size copi solut copy_solut solutionclon swicth valu copy_solutiongetdata cell copy_solutiongetdata cell els copy_solutiongetdata cell return new obtain solut return copy_solut instanci new oper order obtain new solut codeblock python binarymut instanc mutat simplebinarymut use defin binarysolut solut binarysolutionrandom obtain new solut use oper new_solut mutatorapplysolut note develop simplebinarymut avail macopoperatorsdiscretemutatorssimplebinarymut macop crossov oper inspir darwin theori evolut crossov start two solut gener socal offspr solut compos fusion data parent solut imag _staticdocumentationproject_knapsack_crossoverpng width align center exampl merg two solut specif split criterion order obtain offspr implement simplecrossov crossov oper merg data two solut first half solut save ad second half solut gener new solut offspr codeblock python modul import macopoperatorsdiscretebas import crossov class simplecrossovercrossov def applyself solut solut size solutions default split index use splitindex intsiz copi data solut firstdata solution_datacopi copi solut copy_solut solutionclon copy_solutiongetdata splitindex firstdatasplitindex return copy_solut use crossov oper creat gener new solut exampl use codeblock python simplecrossov instanc crossov simplecrossov use defin binarysolut solut binarysolutionrandom solut binarysolutionrandom obtain new solut use crossov offspr crossoverapplysolut solut tip develop simplecrossov avail macopoperatorsdiscretecrossoverssimplecrossov macop howev choic halv merg data made randomli next part introduc polici featur macop enabl choos next oper appli search process base specif criterionimplement exampl within api macop find implement multiobject evolutionari algorithm base decomposit moead generalpurpos algorithm approxim pareto set multiobject optim problem decompos origin multiobject problem number singleobject optim subproblem use evolutionari process optim subproblem simultan cooper moead stateofart algorithm aggregationbas approach multiobject optim imag _staticdocumentationsearch_space_moeadpng width align center illustr two main object subdivis singleobject optim subproblem order find pareto front macopalgorithmsmultimosubproblem class defin subproblem moead macopalgorithmsmultimoead class exploit mosubproblem implement moead use weightedsum object method exampl moead knapsack problem avail knapsackmultiexamplepy_ _knapsackmultiexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesknapsackmultiexamplepyubqp problem definit understand ubqp problem given collect mathn item pair item associ profit valu posit neg zero unconstrain binari quadrat program ubqp seek subset item maxim sum pair valu valu pair accumul sum two correspond item select feasibl solut ubqp instanc specifi binari string size mathn variabl indic whether correspond item includ select mathemat definit formal convent singleobject ubqp problem maxim follow object function mathfxxqxsum_insum_jnq_ijx_ix_j mathqq_ij mathn mathn matrix constant valu mathx vector mathn binari zeroon variabl ie mathx mathi n mathx transpos mathx macop ubqp implement let see possibl use macop packag implement deal ubqp instanc problem solut structur definit firstli go use type solut allow us defin structur solut avail macopsolutionsdiscretebinarysolut type solut within macop packag repres exactli one would wish let see exampl use code python macopsolutionsdiscret import binarysolut solut binarysolutionrandom printsolut result solut obtain code bash binari solut ubqp evalu structur solut mean gener seek evalu need creat new evalu specif problem rel evalu function need maximis mathfxxqxsum_insum_jnq_ijx_ix_j go creat class inherit abstract class macopevalutarorsbaseevalu code python macopevaluatorsbas import evalu class ubqpevaluatorevalu ubqp evalu class enabl comput ubqp solut use specif _data store _data dictionari attritut requir measur comput ubqp solut _dataq matrix size n x n real valu data store numpi array comput method enabl comput associ score given ubqp solut def computeself solut appli comput fit solut arg solut solut ubqp solut instanc return float fit score solut fit index_i val_i enumeratesolutiongetdata index_j val_j enumeratesolutiongetdata fit self_dataqindex_i index_j val_i val_j return fit cost function unconstrain binari quadrat problem well defin tip class propos avail macop packag macopevaluatorsdiscretemonoubqpevalu run algorithm necessari tool avail abl deal problem look solut search space ubqp instanc use local search algorithm alreadi implement macop uncomfort element code follow refer complet macop documentation_ focus concept tool packag code python main import import numpi np modul import macopsolutionsdiscret import binarysolut macopevaluatorsdiscretemono import ubqpevalu macopoperatorsdiscretemut import simplemut simplebinarymut macoppoliciesclass import randompolici macopalgorithmsmono import iteratedlocalsearch il macopalgorithmsmono import hillclimberfirstimprov useful instanc data n qap_instance_fil qap_instancetxt default valid def validatorsolut return true defin init random solut def init return binarysolutionrandomn valid load ubqp instanc openubqp_instance_fil r f line freadlin get string float point valu matrix q_data join linereplacen line line load concaten obtain string q_matrix npfromstringq_data dtypefloat sep reshapen n printfq_matrix shape q_matrixshap one oper oper simplemut simplebinarymut random polici polici randompolicyoper use load data ubqp instanc evalu ubqpevaluatordataq q_matrix pass global evalu param il hcfi hillclimberfirstimprovmentinit evalu oper polici valid maximisetru verbosetru algo ilsinit evalu oper polici valid localsearchhcfi maximisetru verbosetru run algorithm bestsol algorun ls_evalu printsolut ubqp instanc score formatevaluatorcomputebestsol ubqp problem solv possibl macop remind complet code avail ubqpexamplepy_ file _ubqpexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesubqpexamplepi _document httpsjbuisinegithubiomacop_buildhtmldocumentationsubqp problem instanc gener defin quadrat assign problem instanc use avail mubqp_ multiobject quadrat problem gener genrat instanc limit singl object purpos exampl avail file mubqpgeneratorr use gener instanc use r languag code bash rscript mubqpgeneratorr ubqp_instancetxt main paramet use gener ubqp instanc ρ object correl coeffici number object function n length bit string matrix densiti frequenc nonzero number seed use _mubqp httpmocobenchsourceforgenetindexphpnproblemmubqp _ubqp_instancetxt httpsgithubcomjbuisinemacopblobmasterexamplesinstancesubqpubqp_instancetxt load data instanc go load instanc via python code use us later code python qap_instance_fil ubqp_instancetxt n instanc size load ubqp instanc openubqp_instance_fil r f line freadlin get string float point valu matrix q_data join linereplacen line line load concaten obtain string q_matrix npfromstringq_data dtypefloat sep reshapen n printfq_matrix q_matrixshap note know size instanc structur document header size quit quick look line relat mathq matrixunconstrain binari quadrat program given collect mathn item pair item associ profit valu posit neg zero unconstrain binari quadrat program ubqp seek subset item maxim sum pair valu valu pair accumul sum two correspond item select ubqp problem tackl exampl toctre maxdepth number caption content problem instanc implementationqap problem definit quadrat assign problem qap introduc koopman beckman context locat indivis econom activ object problem assign set facil set locat way minim total assign cost assign cost pair facil function flow facil distanc locat facil locat assign exampl consid facil locat problem four facil four locat one possibl assign shown figur facil assign locat facil assign locat facil assign locat facil assign locat assign written permut mathp mean facil assign locat facil assign locat facil assign locat facil assign locat figur line pair facil indic requir flow facil thick line increas valu flow imag _staticexamplesqapfactories_qappng width align center alt exampl qap facil locat problem calcul assign cost permut requir flow facil distanc locat need tabularcolumn pcmpcmpcmpcm csvtabl flow current facil header facil facil j flow j width csvtabl distanc locat header locat locat j distanc j width assign cost permut comput mathfdfdfdfd result math note permut optim solut mathemat definit set mathnn maths_nphinn set permut paramet mathff_ij mathnn matrix mathf_ij requir flow facil mathi mathj mathdd_ij mathnn matrix mathd_ij distanc locat mathi mathj optim problem mathmin_ϕs_nsum_insum_jnf_ijd_phiiphij assign facil locat repres permut mathphi mathphii locat facil mathi assign individu product mathf_ijd_phiiphij cost assign facil mathi locat mathphii facil mathj locat mathphij macop qap implement let see possibl use macop packag implement deal qap instanc problem solut structur definit firstli go use type solut allow us defin structur solut avail macopsolutionsdiscretecombinatoryintegersolut type solut within macop packag repres exactli one would wish ie solut store sequenc integ rel size problem order sort let see exampl use code python macopsolutionsdiscret import combinatoryintegersolut solut combinatoryintegersolutionrandom printsolut result solut obtain code bash combinatori integ solut qap evalu structur solut mean gener seek evalu need creat new evalu specif problem rel evalu function mathmin_ϕs_nsum_insum_jnf_ijd_phiiphij go creat class inherit abstract class macopevalutarorsbaseevalu code python macopevaluatorsbas import evalu class qapevaluatorevalu qap evalu class enabl comput qap solut use specif _data store _data dictionari attritut requir measur comput qap solut _dataf matrix size n x n flow data facil store numpi array _datad matrix size n x n distanc data locat store numpi array comput method enabl comput associ score given qap solut def computeself solut appli comput fit solut arg solut solut qap solut instanc return float fit score solut fit index_i val_i enumeratesolutiongetdata index_j val_j enumeratesolutiongetdata fit self_datafindex_i index_j self_datadval_i val_j return fit cost function quadrat problem well defin tip class propos avail macop packag macopevaluatorsdiscretemonoqapevalu run algorithm necessari tool avail abl deal problem look solut search space qap instanc use local search algorithm alreadi implement macop uncomfort element code follow refer complet macop documentation_ focus concept tool packag code python main import import numpi np modul import macopsolutionsdiscret import combinatoryintegersolut macopevaluatorsdiscretemono import qapevalu macopoperatorsdiscretemut import simplemut macoppoliciesclass import randompolici macopalgorithmsmono import iteratedlocalsearch il macopalgorithmsmono import hillclimberfirstimprov useful instanc data n qap_instance_fil qap_instancetxt default valid check consist data ie uniqu element def validatorsolut lenlistsolutiongetdata lensetlistsolutiongetdata printnot valid return fals return true defin init random solut def init return combinatoryintegersolutionrandomn valid load qap instanc openqap_instance_fil r f file_data freadlin printfinst inform file_data d_line file_datan d_data joind_linesreplacen f_line file_datan n f_data joinf_linesreplacen d_matrix npfromstringd_data dtypefloat sep reshapen n printfd matrix shape d_matrixshap f_matrix npfromstringf_data dtypefloat sep reshapen n printff matrix shape f_matrixshap one oper oper simplemut random polici even list solut one element polici randompolicyoper use load data qap instanc evalu qapevaluatordataf f_matrix d_matrix pass global evalu param il hcfi hillclimberfirstimprovmentinit evalu oper polici valid maximisefals verbosetru algo ilsinit evalu oper polici valid localsearchhcfi maximisefals verbosetru run algorithm bestsol algorun ls_evalu printsolut qap instanc score formatevaluatorcomputebestsol qap problem solv possibl macop remind complet code avail qapexamplepy_ file _qapexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesqapexamplepi _document httpsjbuisinegithubiomacop_buildhtmldocumentationsqap problem instanc gener defin quadrat assign problem instanc use avail mqap_ multiobject quadrat problem gener genrat instanc limit singl object purpos exampl file makeqapunicc use gener instanc code bash g makeqapunicc mqapgener mqapgener n k f qap_instancetxt follow paramet n posit integ number facilitiesloc k posit integ number object f posit integ maximum flow facil posit integ maximum distanc locat posit long random seed gener qap_instancetxt_ file contain two matric mathf mathd defin instanc problem _mqap httpswwwcsbhamacukjdkmqap _qap_instancetxt httpsgithubcomjbuisinemacopblobmasterexamplesinstancesqapqap_instancetxt load data instanc go load instanc via python code use us later code python qap_instance_fil qap_instancetxt n instanc size openqap_instance_fil r f file_data freadlin printfinst inform file_data d_line file_datan d_data joind_linesreplacen f_line file_datan n f_data joinf_linesreplacen d_matrix npfromstringd_data dtypefloat sep reshapen n printfd matrix shape d_matrixshap f_matrix npfromstringf_data dtypefloat sep reshapen n printff matrix shape f_matrixshap note know size instanc structur document quit quick look line relat mathf mathd matricesquadratr assign problem exampl deal use macop packag relat quadrat assign problem qap use known exampl problem associ set facil mathf set locat mathl imag _staticexamplesqapfactories_qappng width align center alt exampl qap facil locat problem toctre maxdepth number caption content problem instanc implement note full code propos exampl avail qapexamplepy_ _qapexamplepi httpsgithubcomjbuisinemacopblobmasterexamplesqapexamplepydocument toctre titlesonli page page pagetop_level_object pagedisplay pageinclude_path endif endfor objdisplay objtyp objnam objvalu none objannot none annot objannot objannot endif objvalu none objvalu endif endif objdocstringprepare_docstringind endif extend pythonclassrst objdisplay orphan endif mod objnam objnamelength pymodul objnam objdocstr autoapinestedpars objdocstringprepare_docstringind endif block subpackag set visible_subpackag objsubpackagesselectattrdisplaylist visible_subpackag toctre titlesonli maxdepth subpackag visible_subpackag subpackageshort_nam indexrst endfor endif endblock block submodul set visible_submodul objsubmodulesselectattrdisplaylist visible_submodul toctre titlesonli maxdepth submodul visible_submodul submoduleshort_nam indexrst endfor endif endblock block content objal none set visible_children objchildrenselectattrshort_nam objalllist elif objtyp equaltopackag set visible_children objchildrenselectattrdisplaylist els set visible_children objchildrenselectattrdisplayrejectattrimportedlist endif visible_children objtypelength set visible_class visible_childrenselectattrtyp equalto classlist set visible_funct visible_childrenselectattrtyp equalto functionlist showmodulesummari autoapi_opt visible_class visible_funct block class visible_class class autoapisummari klass visible_class klassid endfor endif endblock block function visible_funct function autoapisummari function visible_funct functionid endfor endif endblock endif obj_item visible_children obj_itemrenderedind endfor endif endblock objdisplay function objshort_nam objarg objreturn_annot none objreturn_annot endif sphinx_vers properti objproperti properti endfor endif objdocstr objdocstringprepare_docstringind els endif endif objdisplay sphinx_vers method objshort_nam objarg properti objproperti properti endfor els objmethod_typ objshort_nam objarg endif objdocstr objdocstringprepare_docstringind endif endif extend pythondatarst extend pythonmodulerst objdisplay py objtyp objshort_nam objarg objarg endif objbas showinherit autoapi_opt base base objbas class base looplast endif endfor endif showinheritancediagram autoapi_opt objbas object autoapiinheritancediagram objobjfull_nam part privatememb autoapi_opt privatebas endif endif endif objdocstr objdocstringprepare_docstringind endif inheritedmemb autoapi_opt set visible_class objclassesselectattrdisplaylist els set visible_class objclassesrejectattrinheritedselectattrdisplaylist endif klass visible_class klassrenderedind endfor inheritedmemb autoapi_opt set visible_attribut objattributesselectattrdisplaylist els set visible_attribut objattributesrejectattrinheritedselectattrdisplaylist endif attribut visible_attribut attributerenderedind endfor inheritedmemb autoapi_opt set visible_method objmethodsselectattrdisplaylist els set visible_method objmethodsrejectattrinheritedselectattrdisplaylist endif method visible_method methodrenderedind endfor endif