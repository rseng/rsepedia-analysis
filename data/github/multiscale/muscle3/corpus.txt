contribut guidelin welcom kind contribut softwar simpl comment question full fledg pull request httpshelpgithubcomarticlesaboutpullrequests_ pleas read follow code conduct code_of_conductrst_ contribut one follow case question think may found bug includ unexpect behavior want make kind chang code base eg fix bug add new featur updat document section outlin step case question use search function httpsgithubcomyatimlyatimlissues_ see someon alreadi file issu issu search yield relev result make new issu appli question label appli label relev think may found bug use search function httpsgithubcomyatimlyatimlissues_ see someon alreadi file issu issu search yield relev result make new issu make sure provid enough inform rest commun understand caus context problem depend issu may want includ sha hashcod httpshelpgithubcomarticlesautolinkedreferencesandurlscommitshas_ commit caus problem identifi inform name version number depend your use inform oper system appli relev label newli creat issu want make kind chang code base import announc plan rest commun start work announc form new issu import wait kind consensu reach idea good idea need fork repositori github profil creat featur branch latest master commit work featur branch make sure stay date master branch pull chang possibl upstream repositori follow instruct httpshelpgithubcomarticlesconfiguringaremoteforafork_ httpshelpgithubcomarticlessyncingafork_ make sure exist test still work run python setuppi test add test necessari updat expand document push httprogerdudlergithubiogitguide_ featur branch fork yatiml repositori github creat pull request eg follow instruct httpshelpgithubcomarticlescreatingapullrequest_ case feel like youv made valuabl contribut dont know write run test gener document dont let discourag make pull request help go ahead submit pull request keep mind might ask append addit commit pull request chang log notabl chang project document file project adher semant version httpsemverorg_ incompat chang compute_el call compon ymmsl file improv use latest openssl librari instal automat fix handl noncontigu forder numpi array c memori usag larg dictslist reason improv shutdown python submodel crash log warn messag improv access set c flexibl python produc detail log aid debug improv pkgconfig setup improv build system output help find problem document log python protobuf depend build compat fix c listdict build function c useafterfre receiv grid thank pavel test report issu dongwei test report issu ad support send receiv multidimension gridsarray support python improv python support build compat oper system thank olivi test report fix build issu pavel test report build issu hamid test report build issu ben test report build issu incompat chang datakey return stdstring instead dataconstref datavalu return data rather dataconstref ad support fortran includ mpi improv fix exampl small document improv improv compat packag use grpc thank pavel report documentationexampl issu derek test eagl dongwei report grpc issu ad support c support mpi c improv clusterhpc network incompat chang fatal logic error throw instead exit chanc shut model cleanli exit instanceexit_error replac instanceerror_shutdown longer exit process shut instanc central muscl manag set call set everywher paramet result api chang sever place initi releas muscl ad coupl differ submodel instanc spatial tempor scale separ overlap set manag combin featur python support initi distribut execut capabl contributor coven code conduct pledg interest foster open welcom environ contributor maintain pledg make particip project commun harassmentfre experi everyon regardless age bodi size disabl ethnic gender ident express level experi educ socioeconom statu nation person appear race religion sexual ident orient standard exampl behavior contribut creat posit environ includ use welcom inclus languag respect differ viewpoint experi grace accept construct critic focus best commun show empathi toward commun member exampl unaccept behavior particip includ use sexual languag imageri unwelcom sexual attent advanc troll insultingderogatori comment person polit attack public privat harass publish other privat inform physic electron address without explicit permiss conduct could reason consid inappropri profession set respons project maintain respons clarifi standard accept behavior expect take appropri fair correct action respons instanc unaccept behavior project maintain right respons remov edit reject comment commit code wiki edit issu contribut align code conduct ban temporarili perman contributor behavior deem inappropri threaten offens harm scope code conduct appli within project space public space individu repres project commun exampl repres project commun includ use offici project email address post via offici social media account act appoint repres onlin offlin event represent project may defin clarifi project maintain enforc instanc abus harass otherwis unaccept behavior may report contact project team lveenesciencecenternl complaint review investig result respons deem necessari appropri circumst project team oblig maintain confidenti regard report incid detail specif enforc polici may post separ project maintain follow enforc code conduct good faith may face temporari perman repercuss determin member project leadership attribut code conduct adapt contributor coven httpswwwcontributorcovenantorg_ version avail httpswwwcontributorcovenantorgversioncodeofconducthtml imag httpsgithubcommultiscalemusclerawdevelopdocssourcemuscle_logo_readmepng alt muscl imag httpsreadthedocsorgprojectsmusclebadgeversiondevelop target httpsmusclereadthedocsioendevelopbadgedevelop alt document build statu imag httpsgithubcommultiscalemuscleworkflowscontinuous_integrationbadgesvgbranchdevelop target httpsgithubcommultiscalemuscleact alt build statu imag httpsapicodacycomprojectbadgecoverageeaccfceecdfeff target httpswwwcodacycomapplourensveenmuscl alt code coverag imag httpsapicodacycomprojectbadgegradeeaccfceecdfeff target httpswwwcodacycomapplourensveenmuscl alt codaci grade imag httpsrequiresiogithubmultiscalemusclerequirementssvgbranchdevelop target httpsrequiresiogithubmultiscalemusclerequirementsbranchdevelop alt requir statu imag httpszenodoorgbadgesvg target httpszenodoorgbadgelatestdoi imag httpsimgshieldsiobadgersdmuscleaesvg target httpswwwresearchsoftwarenlsoftwaremuscl muscl third incarn muscl multiscal coupl librari environ develop emusc project univers amsterdam netherland escienc center brows muscl documentation_ get start legal muscl copyright univers amsterdam netherland escienc center licens apach licens contribut welcom contribut muscl small addit fix pleas submit pull request well review chang appli want add larger featur pleas make issu describ want coordin avoid doubl work detail see document contributing_ muscl commun foster welcom atmospher particip open everyon order ensur stay way code conduct_ enforc necessari pleas treat fellow human be respect _the muscl document httpsmusclereadthedocsio _document contribut httpmusclereadthedocsioenlatestcontributinghtml _code conduct httpsgithubcommultiscalemuscleblobdevelopcode_of_conductmd contribut muscl muscl develop commun contributor welcom anyon everyon help us build mayb youv found mistak code happen human would like fix want add new featur improv document that great howev muscl work differ peopl simultan need system keep track chang doesnt becom unintellig mess use git version control system togeth github host platform describ git github would much document describ process contribut chang muscl detail assum alreadi git instal github account your log that done pleas proceed make issu issu found tab top repositori home page pleas check see bug want fix featur want add alreadi issu dedic feel free add discuss pleas make new issu discov error muscl pleas describ tri achiev achiev result expect happen instead inform possibl someon els reproduc problem check propos fix realli solv issu would like new featur would like add pleas describ context your use muscl tri achiev new featur would help new featur work want fix bug implement featur youll set develop environ get local repositori first youll need public git repositori write access contain muscl write access main muscl repositori your set alreadi click fork button top right main muscl repositori page make copi repositori write account next need copi public repositori local comput easili edit file done clone repositori git clone gitgithubcommultiscalemusclegit origin repositori youv fork probabl someth like git clone gitgithubcomusernamemusclegit use clone download button copi locat clipboard creat local directori name muscl contain git repositori work instal tool insid directori first check develop branch cd muscl git checkout develop next youll need virtual environ instal develop tool virtualenv p python envsmuscl path arbitrari virtualenv directori softwar put anywher want env subdirectori home directori somewhat standard though note creat virtualenv move around without break easi make new one new locat instead activ environ instal develop tool sourc envsmusclebinactiv pip instal e dev run test suit make sure everyth work order make test make chang chang made fresh branch dedic issu address way multipl peopl work time multipl issu address simultan without everyon get confus start make new branch start develop branch git checkout develop git checkout b issu instead put number issu your address simpl bug whole issu probabl fix singl chang singl chang may affect differ function file chang relat doesnt make sens one first make test detect bug your go fix make sure fail run test suit make test fix bug run test make sure pass everyth order commit chang git add changed_filepi some_dirother_changed_filepi git commit made x configur git push last command push chang back server develop see everi commit make much easier collabor note commit small possibl pleas hack away sever day commit whole giant bunch chang singl commit make imposs figur later chang chang introduc bug tri find solv complex problem singl commit enough youll make seri repeat step issu solv start test often best way go ad new featur well youll find youll need think new featur work creat test youv done implement lot easier one last note never copypast code anoth program fine extern depend although tri limit tri keep instal simpl kept separ copypast code lead complic legal issu would realli like avoid pleas contribut code wrote thank make pull request youv made chang need resolv issu next step make pull request chang far branch either main repositori fork main repositori pull request request maintain muscl take chang branch incorpor main version softwar make pull request make sure commit push chang test pass go github homepag fork one main muscl repositori youv push github show compar pull request button otherwis look branch use top left dropdown button click new pull request button next give page describ pull request want request merg issu branch develop branch main muscl repositori add descript chang youv made click creat pull request your set interact like issu pull request github kind discuss forum propos chang discuss may ask make improv accept pull request pull request open addit commit push public branch automat show satisfi chang pull request accept code becom part muscl thank _apidocsfortran api document fortran page provid full document fortran api muscl note type fortran variabl type kind type specifi broad categori ie whether logic valu text integ float point number kind subdivid number kind differ precis size tradit fortran standardis kind avail may vari compil compil machin machin fortran invent number represent much less standardis today languag design left implement avoid make languag imposs implement particular hardwar sincl libmuscl api use integ float point number place need abl declar kind also type andor kind sometim show function name need consist name avoid confus complic somewhat lack guarante type avail howev day hardwar relev muscl use two complement integ size bit ieee float point number use bit precis standardis without exclud anyon mani compil integ type size n byte written integern standard howev guarante work fortran standardis way select kind least given precis becam avail form selected_int_kind selected_real_kind function work theyr pain write time mention integ float point type libmuscl uniqu name use function name paramet use name defin correspond kind use declar variabl use libmuscl api write typekind anoth way compil support work well name type follow name kind paramet descript int libmuscle_int bit sign complement integ int libmuscle_int bit sign complement integ int libmuscle_int bit sign complement integ int libmuscle_int bit sign complement integ integ default integ size libmuscle_s use array indic size real libmuscle_r bit ieee float point real libmuscle_r bit ieee float point said use integern realn style type use use eg integ api expect libmuscle_int libmuscle_s integ probabl work otherwis tri integ namespac libmuscl fmodul libmuscl synopsi fortran modul libmuscl fcurrentmodul libmuscl libmuscle_data ftype libmuscle_data repres libmuscl data object opaqu object may return pass libmuscl function contain directli access member respect creation assign copi ftypelibmuscle_data object act like python object basic valu logic string integ real get copi list dictionari byte array variabl contain refer get copi ftype libmuscle_dataconstref repres readonli refer libmuscl data object opaqu object like ftypelibmuscle_data dataconstref object work exactli data object except name correspond function start libmuscle_dataconstref creation free nonmodifi oper support sinc function otherwis ident document separ want know use say libmuscle_dataconstref_as_int look ffunclibmuscle_data_as_int class mainli use repres receiv messag modifi ffunction libmuscle_data_cr creat data object repres nil nil special data valu like nullptr c none python r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_createvalu creat data object repres logic valu p logic valu valu repres r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_createvalu creat data object repres charact valu p charact valu valu repres r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_createvalu creat data object repres integ valu support kind default integ kind libmuscle_intn n set see note top page integ type libmuscl note libmuscl support unsign integ dont exist fortran map correspond sign type may caus silent overflow number sign type rang p integ valu valu repres see r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_createvalu creat data object repres real valu support kind libmuscle_r libmuscle_r see note top page real type libmuscl p real valu valu repres r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_createvalu creat data object contain ftypeymmsl_set object p ymmsl_set valu set valu repres r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_griddata_array creat data object contain grid array argument must array type logic default kind array type integ kind libmuscle_int libmuscle_int array type real kind libmuscle_r kind libmuscle_r grid creat function index name p array data_array array data repres r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_griddata_array index_nam creat data object contain grid array data_array argument must array type logic default kind array type integ kind libmuscle_int libmuscle_int array type real kind libmuscle_r kind libmuscle_r ndimension array pass first argument must n addit argument type charact give name index order instanc array repres tabl index data_arrayrow column row column would reason index name note muscl use name make easier understand messag receiv side save analys later p array data_array array data repres p charact index_nam name grid index r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_dict creat data object contain empti dictionari r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_list creat data object contain empti list r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_nilss creat data object contain list size nil valu p integ size number nil valu put list kindlibmuscle_s r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_byte_arrays creat data object contain byte array given number byte p integ size number byte alloc array libmuscle_s r obj new data object rtype obj libmuscle_data ffunction libmuscle_data_create_byte_arraybuf creat data object refer given data buffer pass copi creat data object refer buffer need make sure buffer exist long data object andor copi use exampl codeblock fortran typelibmuscle_data characterlen dimens byte characterlen dimens allocat buf creat data bytesi acharmodi end creat data object refer libmuscle_data_create_byte_arraybyt contain byte array size extract data new buffer allocatebuflibmuscle_data_s call libmuscle_data_as_byte_arrayd buf icharbufi equal modi clean buffer data object deallocatebuf call libmuscle_data_fre p charact buf array charact refer r obj new data object rtype obj libmuscle_data fsubroutin libmuscle_data_freeself free data object free resourc associ given data object use object anyth call invalid p libmuscle_data self data object free fsubroutin libmuscle_data_setself valu assign valu data object valu data object self valu self must valu nil okay uninitialis ftypelibmuscle_data valu hold basic type valu copi self overwrit previou valu self valu hold list dict byte array self end refer object valu havent creat self yet shorter use ffunclibmuscle_data_cr equival self valu c python p libmuscle_data self data object assign p libmuscle_data valu data object assign fsubroutin libmuscle_data_setself valu assign valu valu self self must initialis ftypelibmuscle_data object target ftypelibmuscle_data object exist yet use ffunclibmuscle_data_cr instead equival self valu c python valu may type logic charact integ real integ kind may repres bit bit bit bit valu real kind may bit singl bit doubl precis p libmuscle_data self data object assign p see_abov valu valu assign ffunction libmuscle_data_is_a_logicalself determin whether data object contain logic boolean valu p libmuscle_data self data object inspect r true object contain logic valu rtype logic ffunction libmuscle_data_is_a_characterself determin whether data object contain charact string valu p libmuscle_data self data object inspect r true object contain charact valu rtype logic ffunction libmuscle_data_is_a_intself determin whether data object contain integ valu p libmuscle_data self data object inspect r true object contain integ valu rtype logic ffunction libmuscle_data_is_a_intself determin whether data object contain integ valu p libmuscle_data self data object inspect r true object contain integ valu rtype logic ffunction libmuscle_data_is_a_intself determin whether data object contain integ valu p libmuscle_data self data object inspect r true object contain integ valu rtype logic ffunction libmuscle_data_is_a_intself determin whether data object contain integ valu p libmuscle_data self data object inspect r true object contain integ valu rtype logic ffunction libmuscle_data_is_a_realself determin whether data object contain singl precis float point valu p libmuscle_data self data object inspect r true object contain singl precis float valu rtype logic ffunction libmuscle_data_is_a_realself determin whether data object contain doubl precis float point valu p libmuscle_data self data object inspect r true object contain doubl precis float valu rtype logic ffunction libmuscle_data_is_a_settingsself determin whether data object contain set valu p libmuscle_data self data object inspect r true object contain set valu rtype logic ffunction libmuscle_data_is_nilself determin whether data object contain nil valu p libmuscle_data self data object inspect r true object contain nil valu rtype logic ffunction libmuscle_data_is_a_dictself determin whether data object contain dictionari valu p libmuscle_data self data object inspect r true object contain dictionari rtype logic ffunction libmuscle_data_is_a_listself determin whether data object contain list valu p libmuscle_data self data object inspect r true object contain list rtype logic ffunction libmuscle_data_is_a_grid_of_logicalself determin whether data object contain grid logic valu p libmuscle_data self data object inspect r true object contain grid logic rtype logic ffunction libmuscle_data_is_a_grid_of_intself determin whether data object contain grid integ valu kind libmuscle_int p libmuscle_data self data object inspect r true object contain grid int rtype logic ffunction libmuscle_data_is_a_grid_of_intself determin whether data object contain grid integ valu kind libmuscle_int p libmuscle_data self data object inspect r true object contain grid int rtype logic ffunction libmuscle_data_is_a_grid_of_realself determin whether data object contain grid real valu kind libmuscle_r p libmuscle_data self data object inspect r true object contain grid real rtype logic ffunction libmuscle_data_is_a_grid_of_realself determin whether data object contain grid real valu kind libmuscle_r p libmuscle_data self data object inspect r true object contain grid real rtype logic ffunction libmuscle_data_is_a_byte_arrayself determin whether data object contain byte array valu p libmuscle_data self data object inspect r true object contain byte array rtype logic ffunction libmuscle_data_sizeself return size list number item dict number keyvalu pair byte array number byte p libmuscle_data self data object get size r size size object rtype size integ kindlibmuscle_s ffunction libmuscle_data_as_logicalself err_cod err_msg access logic valu use ffunclibmuscle_data_is_a_log ascertain data object contain logic valu data object contain logic boolean valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu logic valu held data object equal libmuscle_runtime_error data valu contain logic boolean valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata integ err_cod logic val characterlen allocat str err_msg creat data object contain logic valu mydata libmuscle_data_createtru retriev valu val libmuscle_data_as_logicalmydata val equal true attempt incorrectli retriev charact valu str libmuscle_data_as_charactermydata err_cod err_msg err_cod ne libmuscle_success print err_msg need free memori error messag return deallocateerr_msg end free data object call libmuscle_data_freemydata p libmuscle_data self data object get logic valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu logic ffunction libmuscle_data_as_characterself err_cod err_msg access charact string valu use ffunclibmuscle_data_is_a_charact ascertain data object contain charact valu data object contain charact string valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu charact valu held data object equal libmuscle_runtime_error data valu contain charact string valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done note result variabl alloc unless error occur must dealloc your done result string youll memori leak exampl codeblock fortran typelibmuscle_data mydata characterlen allocat str creat data object contain charact valu mydata libmuscle_data_createexampl retriev valu str libmuscle_data_as_charactermydata free retriev copi charact deallocatestr free data object call libmuscle_data_freemydat see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get charact p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu characterlen allocat ffunction libmuscle_data_as_intself err_cod err_msg access integ valu default kind use ffunclibmuscle_data_is_a_int ascertain data object contain default integ valu data object contain integ valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu integ valu held data object equal libmuscle_runtime_error data valu contain integ valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata integ number creat data object contain integ valu mydata libmuscle_data_cr retriev valu number libmuscle_data_as_intmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get integ valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu integ ffunction libmuscle_data_as_intself err_cod err_msg access int valu fit bit use ffunclibmuscle_data_is_a_int ascertain data object contain int valu data object contain libmuscle_int integ selected_int_kind valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu integ valu held data object equal libmuscle_runtime_error data valu contain integ valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata integerkindlibmuscle_int number creat data object contain integ valu mydata libmuscle_data_create_libmuscle_int retriev valu number libmuscle_data_as_intmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get integ valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu integerkindlibmuscle_int ffunction libmuscle_data_as_intself err_cod err_msg access int valu fit bit use ffunclibmuscle_data_is_a_int ascertain data object contain integ valu data object contain libmuscle_int integ selected_int_kind valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu integ valu held data object equal libmuscle_runtime_error data valu contain integ valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata integerkindlibmuscle_int number creat data object contain integ valu mydata libmuscle_data_create_libmuscle_int retriev valu number libmuscle_data_as_intmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get integ valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu integerkindlibmuscle_int ffunction libmuscle_data_as_intself err_cod err_msg access integ valu use ffunclibmuscle_data_is_a_int ascertain data object contain integ valu kind libmuscle_int data object contain int integ valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu integ valu held data object equal libmuscle_runtime_error data valu contain integ valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata integerlibmuscle_int number creat data object contain integ valu mydata libmuscle_data_create_libmuscle_int retriev valu number libmuscle_data_as_intmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get integ valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu integerlibmuscle_int ffunction libmuscle_data_as_intself err_cod err_msg access integ valu kind libmuscle_int use ffunclibmuscle_data_is_a_int ascertain data object contain bit integ valu data object contain libmuscle_int integ selected_int_kind valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu integ valu held data object equal libmuscle_runtime_error data valu contain integ valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata integerkindlibmuscle_int number creat data object contain integ valu mydata libmuscle_data_create_libmuscle_int retriev valu number libmuscle_data_as_intmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get integ valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu integerkindlibmuscle_int ffunction libmuscle_data_as_realself err_cod err_msg access singleprecis byte real valu use ffunclibmuscle_data_is_a_r ascertain data object contain singleprecis real valu data object contain libmuscle_r real selected_real_kind valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu real valu held data object equal libmuscle_runtime_error data valu contain real valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata realkindlibmuscle_r number creat data object contain real valu mydata libmuscle_data_cr retriev valu number libmuscle_data_as_realmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get singleprecis real valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu realkindlibmuscle_r ffunction libmuscle_data_as_realself err_cod err_msg access doubleprecis byte real valu use ffunclibmuscle_data_is_a_r ascertain data object contain doubleprecis real valu data object contain libmuscle_r real selected_real_kind valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu real valu held data object equal libmuscle_runtime_error data valu contain real valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata realkindlibmuscle_r number creat data object contain real valu mydata libmuscle_data_cr retriev valu number libmuscle_data_as_realmydata free data object call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get doubleprecis real valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu realkindlibmuscle_r ffunction libmuscle_data_as_settingsself err_cod err_msg access ftypeymmsl_set valu use ffunclibmuscle_data_is_a_set ascertain data object contain settingstyp valu data object contain ftypeymmsl_set valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call return valu valu held data object equal libmuscle_runtime_error data valu contain set valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done exampl codeblock fortran typelibmuscle_data mydata typeymmsl_set set set creat set object set ymmsl_settings_cr creat data object contain set valu mydata libmuscle_data_createset retriev valu set libmuscle_data_as_settingsmydata free data object set object call ymmsl_settings_freeset call ymmsl_settings_freeset call libmuscle_data_freemydata see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get set valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu rtype valu typeymmsl_set fsubroutin libmuscle_data_as_byte_arrayself buf err_cod err_msg access byte array valu copi buf use ffunclibmuscle_data_is_a_byte_array ascertain data object contain byte array valu use ffunclibmuscle_data_s get number byte store data object contain byte array charact array valu error messag print execut halt altern pass argument err_cod err_cod err_msg catch error err_cod equal libmuscle_success call content variabl copi buf equal libmuscle_runtime_error data valu contain byte array valu pass err_msg argument well pass variabl contain appropri error messag case error need dealloc use dealloc your done see ffunclibmuscle_data_create_byte_array exampl creat extract byte array valu see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get byte array p charact buf buffer larg enough hold content data object p integ err_cod error code output option p charact err_msg error messag output allocat option ffunction libmuscle_data_get_itemself err_cod err_msg access item list function valid data object contain list use ffunclibmuscle_data_is_a_list check whether case return ftypelibmuscle_data object contain valu given index list object self contain list result invalid err_cod set libmuscle_runtime_error neg zero larger number item list see ffunclibmuscle_data_s err_cod set libmuscle_out_of_rang result invalid return ftypelibmuscle_data object result need freed via ffunclibmuscle_data_fre your done set valu return object updat list easier safer use ffunclibmuscle_data_set_item instead exampl codeblock fortran typelibmuscle_data libmuscle_data_create_nils_libmuscle_s libmuscle_data_get_itemd _libmuscle_s libmuscle_data_is_nild return true call libmuscle_data_fre call libmuscle_data_fre see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get item p integ index get valu rang size kindlibmuscle_s p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu correspond index rtype valu libmuscle_data ffunction libmuscle_data_get_itemself key err_cod err_msg access item dictionari function valid data object contain dictionari use ffunclibmuscle_data_is_a_dict check whether case return ftypelibmuscle_data object contain valu associ given key dictionari object self contain dictionari result invalid err_cod set libmuscle_runtime_error key exist dictionari err_cod set libmuscle_out_of_rang result invalid return ftypelibmuscle_data object result need freed via ffunclibmuscle_data_fre your done note return object invalid new key ad dictionari assign return object updat dictionari easier safer use ffunclibmuscle_data_set_item instead exampl codeblock fortran typelibmuscle_data characterlen allocat libmuscle_data_create_dict call libmuscle_data_set_itemd key valu libmuscle_data_get_itemd key libmuscle_data_as_characterd print print valu dealloc call libmuscle_data_fre call libmuscle_data_fre call libmuscle_data_fre see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object get item p charact key key get valu p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu correspond select key rtype valu libmuscle_data fsubroutin libmuscle_data_set_itemself valu err_cod err_msg set item list function valid data object contain list use ffunclibmuscle_data_is_a_list check whether case subroutin set ith valu list valu valu alreadi store posit replac data object contain list err_cod set libmuscle_runtime_error posit zero neg larger size list err_cod set libmuscle_out_of_rang valu may type logic charact integ real data see ffunclibmuscle_data_get_item exampl see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object set item valu p integ posit set valu rang size kindlibmuscle_s p see_abov valu valu set p integ err_cod error code output option p charact err_msg error messag output allocat option fsubroutin libmuscle_data_set_itemself key valu err_cod err_msg set item dictionari function valid data object contain dictionari use ffunclibmuscle_data_is_a_dict check whether case subroutin set valu store key valu valu alreadi store key replac data object contain dictionari err_cod set libmuscle_runtime_error valu may type logic charact integ real data see ffunclibmuscle_data_get_item exampl see ffunclibmuscle_data_as_log exampl error handl p libmuscle_data self data object set item valu p charact key key set valu p see_abov valu valu set p integ err_cod error code output option p charact err_msg error messag output allocat option ffunction libmuscle_data_keyself err_cod err_msg get ith key dictionari function valid data object contain dictionari use ffunclibmuscle_data_is_a_dict check whether case indic rang number item dictionari inclus usual fortran use ffunclibmuscle_data_s get number item note chang dictionari eg insert new key may chang order keyvalu pair retriev function best chang dictionari iter alway charact valu return muscl variabl end must allocat must dealloc use correspond valu may obtain via ffunclibmuscle_data_valuei codeblock fortran typelibmuscle_data val characterlen allocat key cval integ kindlibmuscle_s integ intval libmuscle_data_create_dict call libmuscle_data_set_itemd key valu call libmuscle_data_set_itemd key valu libmuscle_data_s key libmuscle_data_keyd val libmuscle_data_valu cval libmuscle_data_as_characterv print key cval deallocatekey deallocatecv libmuscle_data_freev end call libmuscle_data_fre p libmuscle_data self data object get key p integ index key retriev libmuscle_s p integ err_cod error code output option p charact err_msg error messag output allocat option r key key given index rtype key charact allocat ffunction libmuscle_data_valueself err_cod err_msg get ith valu dictionari function valid data object contain dictionari use ffunclibmuscle_data_is_a_dict check whether case indic rang number item dictionari inclus usual fortran use ffunclibmuscle_data_s get number item note chang dictionari eg insert new key may chang order keyvalu pair retriev function best chang dictionari iter correspond key may obtain via ffunclibmuscle_data_key see exampl well p libmuscle_data self data object get valu p integ index key retriev libmuscle_s p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index rtype valu libmuscle_data ffunction libmuscle_data_num_dimsself err_cod err_msg get number dimens gridvalu data object function valid data object contain grid use ffunclibmuscle_data_is_a_grid_of_log similar function check grid data object contain grid err_cod set libmuscle_runtime_error p libmuscle_data self data object get number dimens p integ err_cod error code output option p charact err_msg error messag output allocat option r num_dim number dimens rtype num_dim integ libmuscle_s fsubroutin libmuscle_data_shapeself shp err_cod err_msg get shape array gridvalu data object array pass receiv shape must onedimension least length n n number dimens grid function valid data object contain grid use ffunclibmuscle_data_is_a_grid_of_log similar function check grid data object contain grid err_cod set libmuscle_runtime_error p libmuscle_data self data object get shape p integ shp array integ libmuscle_s put shape intent p integ err_cod error code output option p charact err_msg error messag output allocat option ffunction libmuscle_data_has_indexesself err_cod err_msg check whether grid index name return true grid index name fals otherwis function valid data object contain grid use ffunclibmuscle_data_is_a_grid_of_log similar function check grid data object contain grid err_cod set libmuscle_runtime_error p libmuscle_data self data object check index p integ err_cod error code output option p charact err_msg error messag output allocat option r has_index whether index rtype has_index logic ffunction libmuscle_data_indexself err_cod err_msg return name ith index valu rang number dimens function valid data object contain grid use ffunclibmuscle_data_is_a_grid_of_log similar function check grid data object contain grid err_cod set libmuscle_runtime_error index zero neg larger number dimens err_cod set libmuscle_out_of_rang p libmuscle_data self data object get index p integ index index get name libmuscle_s p integ err_cod error code output option p charact err_msg error messag output allocat option r index_nam name index allocat rtype index_nam logic libmuscle_messag ftype libmuscle_messag repres messag sent receiv messag four attribut timestamp option next timestamp data option overlay set timestamp hold simul time wallclock time data messag correspond next timestamp set repres simul time next timestap model gener messag data content messag modelspecif overlay set may pass along messag overlaid onto receiv model set normal use special simul compon ffunction libmuscle_message_createtimestamp data creat new messag object p libmuscle_r timestamp simul time data messag appli p libmuscle_data data object send receiv ffunction libmuscle_message_createtimestamp next_timestamp data creat new messag object p libmuscle_r timestamp simul time data messag appli p libmuscle_r next_timestamp simul time next messag transmit p libmuscle_data data object send receiv ffunction libmuscle_message_createtimestamp data set creat new messag object p libmuscle_r timestamp simul time data messag appli p libmuscle_data data object send receiv p ymmsl_set set overlay set send receiv ffunction libmuscle_message_createtimestamp next_timestamp data set creat new messag object p libmuscle_r timestamp simul time data messag appli p libmuscle_r next_timestamp simul time next messag transmit p libmuscle_data data object send receiv p ymmsl_set set overlay set send receiv ffunction libmuscle_message_timestampself return timestamp associ messag simul time data messag appli r timestamp timestamp rtype timestamp libmuscle_r fsubroutin libmuscle_message_set_timestampself timestamp set timestamp associ messag simul time data messag appli p libmuscle_messag self messag object modifi p timestamp timestamp set ffunction libmuscle_message_has_next_timestampself return whether messag next timestamp set p libmuscle_messag self messag object inspect r has_next_timestamp true there next timestamp rtype has_next_timestamp logic ffunction libmuscle_message_next_timestampself return messag next timestamp call ffunclibmuscle_message_has_next_timestamp return true p libmuscle_messag self messag object inspect r next_timestamp next timestamp messag rtype next_timestamp libmuscle_r fsubroutin libmuscle_message_set_next_timestampself timestamp set next timestamp associ messag simul time next timestep model p libmuscle_messag self messag object modifi p timestamp timestamp set fsubroutin libmuscle_message_unset_next_timestampself unset next timestamp associ messag call ffunclibmuscle_message_has_next_timestamp return fals p libmuscle_messag self messag object modifi ffunction libmuscle_message_get_dataself return data contain messag p libmuscle_messag self messag object inspect r data data contain messag rtype data libmuscle_dataconstref fsubroutin libmuscle_message_set_dataself data set data contain messag note transfer ownership data object still need free p libmuscle_messag self messag object modifi p libmuscle_data data data object take valu fsubroutin libmuscle_message_set_dataself data set data contain messag note transfer ownership data object still need free p libmuscle_messag self messag object modifi p libmuscle_dataconstref data data object take valu ffunction libmuscle_message_has_settingsself return whether messag associ set object p libmuscle_messag self messag object inspect r true iff messag set rtype libmuscle_dataconstref ffunction libmuscle_message_get_settingsself return messag associ set object call ffunclibmuscle_message_has_set return true p libmuscle_messag self messag object inspect r set copi associ set object rtype set ymmsl_set fsubroutin libmuscle_message_set_settingsself set set messag associ set object messag set alreadi replac new set call ffunclibmuscle_message_has_set return true p libmuscle_messag self messag object modifi p ymmsl_set set new set fsubroutin libmuscle_message_unset_settingsself remov associ set object messag may call whether messag current associ set call function ffunclibmuscle_message_has_set return fals p libmuscle_messag self messag object modifi libmuscle_portsdescript ftype libmuscle_portsdescript describ port comput element data structur pass libmuscl describ comput element connect outsid world obtain libmuscl order find comput element flexibl port use portsdescript contain list port name ftypeymmsl_oper ffunction libmuscle_portsdescription_cr creat portsdescript contain port name r ports_descript new portsdescript object rtype ports_descript libmuscle_portsdescript fsubroutin libmuscle_portsdescription_freeself free portsdescript object dealloc resourc associ object call everi portsdescript object your done use p libmuscle_portsdescript self object free fsubroutin libmuscle_portsdescription_addself oper port add port name portsdescript object p libmuscle_portsdescript self object modifi p ymmsl_oper oper oper put port p charact port name port add ffunction libmuscle_portsdescription_num_portsself oper get number port object given oper p libmuscle_portsdescript self object inspect p ymmsl_oper oper chosen oper r num_port number port oper kind libmuscle_s rtype num_port integ ffunction libmuscle_portsdescription_getself oper get ith port name given oper paramet must rang num_port inclus num_port result call ffunclibmuscle_portsdescription_num_port object oper p libmuscle_portsdescript self object inspect p ymmsl_oper oper chosen oper r port_nam name given port rtype port_nam charact libmuscle_inst ftype libmuscle_inst instanc class repres comput element instanc muscl simul class provid lowlevel sendrec api instanc use ffunction libmuscle_instance_cr creat new instanc object port configur mpibas comput element libmuscle_mpi use duplic mpi_comm_world commun design root process rank object must freed your done use ffunclibmuscle_instance_fre r instanc newli creat instanc object rtype instanc libmuscle_inst ffunction libmuscle_instance_createport creat new instanc object given port mpibas comput element libmuscle_mpi use duplic mpi_comm_world commun design root process rank object must freed your done use ffunclibmuscle_instance_fre p libmuscle_portsdescript port port new instanc r instanc newli creat instanc object rtype instanc libmuscle_inst ffunction libmuscle_instance_createcommun root creat new instanc object mpi port configur mpibas comput element mpi commun root rank may pass commun must contain process instanc root must rank one muscl creat duplic commun use creat ftypelibmuscle_inst mpi comput element collect oper must done process simultan commun root object must freed your done use ffunclibmuscle_instance_fre p integ commun mpi commun use option default mpi_comm_world p integ root rank root process option default r instanc newli creat instanc object rtype instanc libmuscle_inst ffunction libmuscle_instance_createport commun root creat new instanc object mpi given port mpibas comput element mpi commun root rank may pass commun must contain process instanc root must rank one muscl creat duplic commun use creat ftypelibmuscle_inst mpi comput element collect oper must done process simultan commun root object must freed your done use ffunclibmuscle_instance_fre p libmuscle_portsdescript port port new instanc p integ commun mpi commun use option default mpi_comm_world p integ root rank root process option default r instanc newli creat instanc object rtype instanc libmuscle_inst fsubroutin libmuscle_instance_freeself free resourc associ given instanc object p libmuscle_inst self object free ffunction libmuscle_instance_reuse_instanceself check whether reus instanc method must call begin reus loop ie f_init oper return valu decid whether enter loop mpibas comput element must execut reus loop process parallel call function top reus loop process p libmuscle_inst self object check reus r reus whether enter reus loop anoth time rtype reus logic ffunction libmuscle_instance_reuse_instanceself apply_overlay check whether reus instanc method must call begin reus loop ie f_init oper return valu decid whether enter loop version function let choos whether appli receiv set overlay return messag your go use ffunclibmuscle_instance_receive_with_set f_init port set fals dont know mean call libmuscle_instance_reuse_inst argument fine turn need specifi fals muscl tell error messag add p libmuscle_inst self object check reus p logic apply_overlay whether appli receiv set overlay r reus whether enter reus loop anoth time rtype reus logic fsubroutin libmuscle_instance_error_shutdownself messag log error shut instanc detect someth wrong want stop instanc call function shut instanc stop program make debug easier mpibas comput element may either call function process root process pass constructor p libmuscle_inst self instanc shut p charact messag error messag describ problem encount ffunction libmuscle_instance_is_setting_a_characterself name err_cod err_msg return whether set type charact set given name exist err_cod set libmuscle_out_of_rang see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r is_charact true set charact type rtype is_charact logic ffunction libmuscle_instance_is_setting_a_intself name err_cod err_msg return whether set type integ set given name exist err_cod set libmuscle_out_of_rang see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r is_int true set integ type rtype is_int logic ffunction libmuscle_instance_is_setting_a_realself name err_cod err_msg return whether set type real set given name exist err_cod set libmuscle_out_of_rang see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r is_real true set real type rtype is_real logic ffunction libmuscle_instance_is_setting_a_logicalself name err_cod err_msg return whether set type logic set given name exist err_cod set libmuscle_out_of_rang see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r is_log true set logic type rtype is_log logic ffunction libmuscle_instance_is_setting_a_realarrayself name err_cod err_msg return whether set array real set given name exist err_cod set libmuscle_out_of_rang see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r is_realarray true set realarray type rtype is_realarray logic ffunction libmuscle_instance_is_setting_a_realarrayself name err_cod err_msg return whether set array real set given name exist err_cod set libmuscle_out_of_rang see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r is_realarray true set realarray type rtype is_realarray logic ffunction libmuscle_instance_get_setting_as_characterself name err_cod err_msg return valu charactervalu model set set given name exist err_cod set libmuscle_out_of_rang valu type charact err_cod set libmuscle_bad_cast see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set retriev p integ err_cod error code output option p charact err_msg error messag output allocat option r valu set valu rtype valu charact ffunction libmuscle_instance_get_setting_as_intself name err_cod err_msg return valu integervalu model set set given name exist err_cod set libmuscle_out_of_rang valu type integ err_cod set libmuscle_bad_cast see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set retriev p integ err_cod error code output option p charact err_msg error messag output allocat option r valu set valu kindlibmuscle_int rtype valu integ ffunction libmuscle_instance_get_setting_as_realself name err_cod err_msg return valu realvalu model set set given name exist err_cod set libmuscle_out_of_rang valu type integ err_cod set libmuscle_bad_cast see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set retriev p integ err_cod error code output option p charact err_msg error messag output allocat option r valu set valu kindlibmuscle_r rtype valu real ffunction libmuscle_instance_get_setting_as_logicalself name err_cod err_msg return valu logicalvalu model set set given name exist err_cod set libmuscle_out_of_rang valu type integ err_cod set libmuscle_bad_cast see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set retriev p integ err_cod error code output option p charact err_msg error messag output allocat option r valu set valu rtype valu logic fsubroutin libmuscle_instance_get_setting_as_realarrayself name valu err_cod err_msg return valu arrayofrealvalu model set note current way get size array advanc featur intend use small fix array case size known advanc programm set given name exist err_cod set libmuscle_out_of_rang valu array real err_cod set libmuscle_bad_cast see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set retriev p libmuscle_r return valu dimens p integ err_cod error code output option p charact err_msg error messag output allocat option fsubroutin libmuscle_instance_get_setting_as_realarrayself name valu err_cod err_msg return valu darrayofrealvalu model set note current way get size array advanc featur intend use small fix array case size known advanc programm set given name exist err_cod set libmuscle_out_of_rang valu array real err_cod set libmuscle_bad_cast see ffunclibmuscle_data_as_log exampl error handl mpibas comput element may call function time within reus loop process simultan p libmuscle_inst self instanc get set p charact name name set retriev p libmuscle_r return valu dimens p integ err_cod error code output option p charact err_msg error messag output allocat option ffunction libmuscle_instance_list_portsself return descript port instanc mpibas comput element may call function root process p libmuscle_inst self instanc whose port describ r port descript port organis oper rtype port libmuscle_portsdescript ffunction libmuscle_instance_is_connectedself port return whether given port connect mpibas comput element may call function root process p libmuscle_inst self instanc inspect p charact port name port inspect r connect true port connect rtype connect logic ffunction libmuscle_instance_is_vector_portself port return whether given port vector port mpibas comput element may call function root process p libmuscle_inst self instanc inspect p charact port name port inspect r connect true port vector port rtype connect logic ffunction libmuscle_instance_is_resizableself port err_cod err_msg return whether port resiz function must call vector port port scalar port err_cod set libmuscle_runtime_error return valu invalid mpibas comput element may call function root process p libmuscle_inst self instanc inspect p charact port name port inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r connect true port vector port rtype connect logic ffunction libmuscle_instance_get_port_lengthself port err_cod err_msg return current length vector port function must call vector port port scalar port err_cod set libmuscle_runtime_error return valu invalid mpibas comput element may call function root process p libmuscle_inst self instanc inspect p charact port name port inspect p integ err_cod error code output option p charact err_msg error messag output allocat option r connect true port vector port rtype connect logic fsubroutin libmuscle_instance_set_port_lengthself port length set current length vector port function must call resiz vector port port scalar port nonresiz vector port err_cod set libmuscle_runtime_error return valu invalid mpibas comput element may call function root process p libmuscle_inst self instanc chang port p charact port name port modifi p integ length new length port p integ err_cod error code output option p charact err_msg error messag output allocat option fsubroutin libmuscle_instance_sendself port_nam messag send messag outsid world via port send nonblock copi messag made store receiv readi receiv mpibas comput element may call function either process root process case messag given root process sent other ignor may want gather oper first collect inform sent root process p libmuscle_inst self instanc send messag p charact port_nam name port send p libmuscle_messag messag messag send fsubroutin libmuscle_instance_sendself port_nam messag slot send messag outsid world via slot port send nonblock copi messag made store receiv readi receiv mpibas comput element may call function either process root process case messag given root process sent other ignor may want gather oper first collect inform sent root process p libmuscle_inst self instanc send messag p charact port_nam name port send p int slot slot send p libmuscle_messag messag messag send ffunction libmuscle_instance_receiveself port_nam err_cod err_msg receiv messag outsid world via port receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect err_cod set libmuscle_runtime_error mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name port receiv p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receiveself port_nam default_msg err_cod err_msg receiv messag outsid world via port receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect copi default_msg return mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name port receiv p libmuscle_messag default_msg default messag case port connect p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receive_on_slotself port_nam slot err_cod err_msg receiv messag outsid world via slot vector port receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect err_cod set libmuscle_runtime_error mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name vector port receiv p integ slot slot receiv p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receive_on_slotself port_nam slot default_msg err_cod err_msg receiv messag outsid world via slot vector port receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect copi default_msg return mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name port receiv p integ slot slot receiv p libmuscle_messag default_msg default messag case port connect p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receive_with_settingsself port_nam err_cod err_msg receiv messag attach set overlay receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect err_cod set libmuscle_runtime_error mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name port receiv p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receive_with_settingsself port_nam default_msg err_cod err_msg receiv messag attach set overlay receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect copi default_msg return mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name port receiv p libmuscle_messag default_msg default messag case port connect p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receive_with_settings_on_slotself port_nam slot err_cod err_msg receiv messag attach set overlay receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect err_cod set libmuscle_runtime_error mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name vector port receiv p integ slot slot receiv p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag ffunction libmuscle_instance_receive_with_settings_on_slotself port_nam slot default_msg err_cod err_msg receiv messag attach set overlay receiv block oper function contact sender wait messag avail receiv return note must free return ftypelibmuscle_messag object your done port receiv connect copi default_msg return mpibas comput element must call function process simultan receiv messag return root process process receiv dummi messag therefor model code scatter broadcast receiv messag nonroot process necessari p libmuscle_inst self instanc receiv messag p charact port_nam name port receiv p integ slot slot receiv p libmuscle_messag default_msg default messag case port connect p integ err_cod error code output option p charact err_msg error messag output allocat option r messag receiv messag rtype messag libmuscle_messag namespac ymmsl fmodul ymmsl synopsi fortran modul ymmsl fcurrentmodul ymmsl ymmsl_oper ymmsl oper repres python integ constant kind ymmsl_oper follow valu avail oper constant none ymmsl_operator_non f_init ymmsl_operator_f_init o_i ymmsl_operator_o_i ymmsl_operator_ b ymmsl_operator_b o_f ymmsl_operator_o_f ymmsl_set ftype ymmsl_set repres libmuscl set object use send receiv set object comput element opaqu object may return pass libmuscl function contain directli access member set object dictionarylik object index string whose valu string logic byte integ byte real number one twodimension array byte real number ffunction ymmsl_settings_cr creat empti set object r obj new set object rtype obj ymmsl_set fsubroutin ymmsl_settings_freeself free set object free resourc associ given set object use object anyth call invalid p ymmsl_set self set object free ffunction ymmsl_settings_equalsself compar two set object equal return true two ftypeymmsl_set object contain key valu p ymmsl_set self object compar p ymmsl_set object compar r equal true object equal rtype equal logic ffunction ymmsl_settings_sizeself return number set object p ymmsl_set self object inspect r count number keyvalu pair set object kindymmsl_s rtype count integ ffunction ymmsl_settings_emptyself return true set object item p ymmsl_set self object inspect r empti whether object empti rtype empti logic ffunction ymmsl_settings_containsself key return true set object contain given key p ymmsl_set self object inspect r contain whether given key exist set object rtype contain logic ffunction ymmsl_settings_is_a_characterself key err_cod err_msg return whether valu type charact given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu type charact rtype logic ffunction ymmsl_settings_is_a_logicalself key err_cod err_msg return whether valu type logic given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu type logic rtype logic ffunction ymmsl_settings_is_a_intself key err_cod err_msg return whether valu type ymmsl_int return true valu integ fit int given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu type ymmsl_int rtype logic ffunction ymmsl_settings_is_a_intself key err_cod err_msg return whether valu type ymmsl_int given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu type ymmsl_int rtype logic ffunction ymmsl_settings_is_a_realself key err_cod err_msg return whether valu type ymmsl_real also return true valu integ even convert would lose precis given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu type ymmsl_real rtype logic ffunction ymmsl_settings_is_a_realarrayself key err_cod err_msg return whether valu array type ymmsl_real given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu array type ymmsl_real rtype logic ffunction ymmsl_settings_is_a_realarrayself key err_cod err_msg return whether valu array type ymmsl_real given key exist err_cod set ymmsl_out_of_bound result invalid p ymmsl_set self set object inspect p charact key name set check p integ err_cod error code output option p charact err_msg error messag output allocat option r true valu array type ymmsl_real rtype logic fsubroutin ymmsl_settings_setself key valu set set given valu set given key exist one ad one overwritten valu may charact string logic byte integ eg ymmsl_int byte integ eg ymmsl_int byte real number ymmsl_real one twodimension array byte real number p ymmsl_set self set object modifi p charact key name set p see_abov valu valu set set ffunction ymmsl_settings_get_as_characterself key err_cod err_msg return valu charactertyp set set current set charactertyp valu err_cod set ymmsl_bad_cast result invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index rtype valu charact ffunction ymmsl_settings_get_as_logicalself key err_cod err_msg return valu logicaltyp set set current set logicaltyp valu err_cod set ymmsl_bad_cast result invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index rtype valu logic ffunction ymmsl_settings_get_as_intself key err_cod err_msg return valu integertyp set set current set integertyp valu valu rang int err_cod set ymmsl_bad_cast result invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index ymmsl_int rtype valu integ ffunction ymmsl_settings_get_as_intself key err_cod err_msg return valu integertyp set set current set integertyp valu err_cod set ymmsl_bad_cast result invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index ymmsl_int rtype valu integ ffunction ymmsl_settings_get_as_realself key err_cod err_msg return valu realtyp set also work set integertyp case convert possibl loss precis set current set real integertyp valu err_cod set ymmsl_bad_cast result invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index ymmsl_real rtype valu real fsubroutin ymmsl_settings_get_as_realarrayself key valu err_cod err_msg return valu set array real set current set array realstyp valu err_cod set ymmsl_bad_cast valu invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index dimens rtype valu ymmsl_real fsubroutin ymmsl_settings_get_as_realarrayself key valu err_cod err_msg return valu set array real set current set array realstyp valu err_cod set ymmsl_bad_cast valu invalid p charact key name set get p integ err_cod error code output option p charact err_msg error messag output allocat option r valu valu given index dimens rtype valu ymmsl_real ffunction ymmsl_settings_eraseself key remov set set object p ymmsl_set self set object modifi p charact key name set remov r remov number set remov ymmsl_size rtype remov integ fsubroutin ymmsl_settings_clearself remov set set object call subroutin set object empti p ymmsl_set self set object modifi ffunction ymmsl_settings_keyself err_cod err_msg get ith key set object note chang set object may chang order key stabl set object chang paramet must rang n n number item set object see ffuncymmsl_settings_s p ymmsl_set self set object get key p ymmsl_size index key retriev r key name ith key allocat rtype key charact _develop releas muscl use git github version manag use git flow_ branch model make releas involv quit step theyr list help make process reliabl inform realli use maintain make releas branch start releas process make releas branch codeblock bash git checkout b releasexyz develop muscl use semant versioning_ name new version accordingli updat changelog releas entri changelogrst describ new featur fix problem use git log get list chang switch develop branch codeblock bash git log favourit option edit changelogrst commit codeblock bash git add changelogrst git commit add version xyz chang log updat version next version updat singl version tag version file root repositori develop branch version set xyzdev xyz next expect version fine chang later eg end releas rather releas branch set number releas cours check document next build document ensur new version number show codeblock bash make doc may give warn miss refer that known issu normal harmless next point web browser docsbuildhtmlindexhtml verifi document built correctli particular new version number browser titl bar well blue box top left page run test make commit test run good idea anyway make releas run make test check everyth order commit version updat usual git poem codeblock bash git add version git commit set releas version xyz git push setupstream origin releasexyz trigger continu integr check that give error fix badg badg readmerst normal point develop branch version everyth master branch point master version note codaci one badg chang need codeblock bash edit readmerst git add readmerst git commit updat badg point master git push merg master branch seem well merg releas branch master branch tag thu make releas least far git flow concern use x option resolv merg conflict caus version updat done previou releas dont branch last command push tag import github github integr codeblock bash git checkout master git merg noff x releasexyz git tag xyz releas xyz git push git push origin xyz make github releas order get doi releas need make releas github go muscl github repository_ click releas select draft new releas select xyz tag upload use releas xyz titl copypast descript chang log convert restructuredtext markdown mayb prepend text someth interest mention option select prereleas final version publish build releas pypi final new version need built upload pypi peopl start use build use codeblock bash rm r build python setuppi sdist bdist_wheel note remov build build directori setuptool use ensur clean build ive seen weird mix version occas better safe sorri check see everyth okay use codeblock bash twine check distmusclexyz seem well upload pypi codeblock bash twine upload distmusclexyz announc releas announc releas usual place peopl know exist short releas messag list new featur fix bug dont forget thank everyon contribut merg releas branch back develop conclud releas need one thing abl continu develop releas branch contain chang chang log want back develop branch well merg back codeblock bash git checkout develop git merg nocommit releasexyz use nocommit give chanc edit chang commit make sure readmerst taken develop side changelogrst come releas branch version given new number probabl xyzdev unless big plan done commit merg continu develop _git flow httpnviecompostsasuccessfulgitbranchingmodel _semant version httpwwwsemverorg _muscl github repositori httpsgithubcommultiscalemuscl uncertainti quantif rare case input paramet model known exactli usual input paramet valu come measur done field lab measur never exact everi model subject uncertainti uncertainti quantif uq provid techniqu analys th uncertainti model paramet result section show exampl blackbox quasimont carlo uncertainti quantif reactiondiffus model creat implement use muscl simul design let start overview form gmmsl diagram setup figur reaction_diffusion_qmcpng scale align center gmmsl diagram qmc reactiondiffus simul setup bottom macromicro model saw earlier reaction model exactli ident previou exampl diffus model remov visualis instead send final state output port final_state_out associ o_f oper would probabl good begin use separ visualis savetodisk compon attach via conduit chang ten copi macro micro compon also ten instanc conduit macro micro muscl creat automat instanc wire oneonon macroi connect microi two new comput element qmc element implement quasimont carlo uq algorithm rr element distribut ensembl evenli given number model instanc quasimont carlo compon submodel sinc actual model realworld system musclemmsl terminolog type compon call proxi well get theoret differ practic look work assum model paramet k reaction diffus model uncertain uniform distribut rang origin valu qmc compon gener quasirandom sampl result box input paramet space result set paramet valu k write paramet parameters_out port name port diagram end pair squar bracket design port vector port vector port port use talk multipl instanc connect comput element number slot messag sent receiv receiv port number slot known length vector port sinc go run ensembl want abl run ensembl member parallel set concurr instanc need cours receiv result set well well receiv vector port case states_in qmcparameters_out port length equal size sampl set produc number may well larger number instanc model accomod given size comput facil rr compon solv issu take messag receiv front_in vector port distribut evenli amongst slot back_out vector port roundrobin fashion henc name length front_in match qmcparameters_out length back_out match number instanc macro return final state map back accordingli next rr need connect model present problem rr send set paramet macro f_init port receiv get paramet valu via muscl central configur need trick muscl provid one form muscle_settings_in port special f_init port muscl comput element automat connect port compon send set object muscl automat receiv messag overlay receiv set top base set central configur receiv submodel ask muscl set muscl look overlay set first set found muscl fall back central base configur diffus model ask valu time actual come valu sent qmc differ instanc diffus model way instanc live univers univers constant unawar howev diffus model instanc everyth look previou exampl one around one remain piec puzzl univers automat extend overlay paramet sent rr compon macromodel instanc automat pass correspond micromodel instanc way k paramet valu arriv reaction model need implement full python program implement look like literalinclud examplespythonreaction_diffusion_qmcpi caption docssourceexamplespythonreaction_diffusion_qmcpi languag python reaction model implement complet unchang diffus model made bit modular remov visualis send final state addit o_f port mention qmc rr compon new howev deserv detail explan quasimont carlo element purpos qmc compon gener set quasirandom pair paramet k pass individu member ensembl model run receiv back final state simul ensembl member calcul ensembl mean final state codeblock python instanc instanc operatoro_i parameters_out oper states_in qmc compon requir input messag initialis produc final result messag make plot instead send singl set paramet pair receiv back singl set final state term commun outsid world therefor work similarli submodel o_i port exactli one state updat step oper run describ muscl may better proxyspecif oper name futur opinion welcom send paramet set vector port parameters_out receiv final state vector port states_in next enter reus loop except pass fals argument explain shortli read check set f_init calcul set paramet valu use quasirandom sobol sequenc codeblock python configur output port instanceis_resizableparameters_out instanceerror_shutdownthi compon need resiz parameters_out port connect someth resiz mayb tri ad load balanc exit instanceset_port_lengthparameters_out n_sampl next need configur output vector port sinc n_sampl set paramet resiz port length need check whether port resiz first may may case depend attach order preserv modular reusabl individu comput element muscl tri tell comput element littl possibl side port ask whether port fix size gener error messag port length fix use function methlibmuscleinstanceerror_shutdown function log error tell rest simul shut instead rais except reduc chanc part simul sit around wait forev messag never send log show origin problem easier debug case port resiz work intend codeblock python sampl rangen_sampl uq_paramet set dssampl k kssampl msg messag none uq_paramet instancesendparameters_out msg sampl sinc run o_i state updat loop advanc simul time howev need loop sampl send messag parameters_out one first creat set object contain paramet go send set class use defin model configur k sinc one need set per ensembl member rest ident defin central configur next creat classlibmusclemessag object send sinc model start time well set timestamp sinc run next timestamp none data send set object muscl contain special support send set object sinc object theyr normal messagepackserialis send messag normal except pass extra argument slot number vector port connect set instanc slot number select exact instanc send messag theyr zerobas length vector port valid slot rang resiz port number sampl sampl correspond slot us send codeblock python sampl rangen_sampl msg instancereceive_with_settingsstates_in sampl reactiondiffus model done send final state back us need receiv effect oper sampl receiv result states_in port pass sampl number slot receiv use slightli differ receiv function rather methlibmuscleinstancerec call methlibmuscleinstancereceive_with_set differ set overlay recal comput element instanc set overlay set muscle_settings_in port automat propag correspond instanc comput element propag done send overlay along messag sent sinc macro micro instanc connect oneonon pair live univers set unawar pair set reactiondiffus simul done howev macro instanc send result singl qmc instanc via rr transpar respect thu univers meet question aris set overlay qmc look like gener answer muscl automat propag overlay differ macro instanc qmc give error messag tri receiv usual methlibmuscleinstancerec methlibmuscleinstancereceive_with_set function solv problem way counterpart send messag muscle_settings_in tri merg incom set overlay overlay qmc simpli return set attribut receiv messag receiv decid case ignor set concaten receiv state togeth plot calcul mean final state probabl want complex analysi set may use save raw data disk later process roundrobin load balanc roundrobin load balanc job sit qmc element macro model distribut mani paramet set qmc produc limit number macro model instanc front side connect qmc back side connect macro codeblock python instancereuse_instancefals f_init start number start index next start done number done index next return num_cal instanceget_port_lengthfront_in num_work instanceget_port_lengthback_out instanceset_port_lengthfront_out num_cal done num_cal start done num_work start num_cal msg instancereceive_with_settingsfront_in start instancesendback_out msg start num_work start msg instancereceive_with_settingsback_in done num_work instancesendfront_out msg done done order distribut messag correctli first need determin number messag well receiv qmc well mani macro instanc determin length correspond vector port sinc front_out connect anoth vector port intrins size need set size explicitli match front_in next process messag read front_in forward back_out alway send macro instanc one messag time make sure messag send back_out receiv one back_in could actual send multipl messag slot receiv result theyll queu process order use methlibmuscleinstancereceive_with_set everywher order correctli pass set overlay sinc use methlibmuscleinstancereceive_with_set f_init port pass fals methlibmuscleinstancereuse_inst technic requir muscl muscl give error messag call methlibmuscleinstancereceive_with_set without pass fals methlibmuscleinstancereuse_inst there way implement rather option lead potenti difficulttodebug situat check clear error messag shown goe wrong chose prefer option discuss interest thing remark first origin model code essenti unchang chang need uncertainti quantif level coupl model muscl encourag modular reus model exampl show benefit approach second see begin librari reusabl compon roundrobin load balanc shown complet modelagnost futur version muscl becom builtin standard compon gener use compon made duplic mapper muscl alreadi small extens muscl qmc compon also made gener modelagnost helper compon like remain modelspecif scale bridg data convert expect model complex system perform uq made significantli simpler use approach load balanc compon describ use roundrobin algorithm distribut work work well case model run take approxim amount comput time gener howev flexibl algorithm desir would requir anoth small extens muscl plan add futur version exampl c fortran muscl come c fortran version uncertainti quantif use case see c fortran section run exampl reaction_diffusion_mc_cppsh reaction_diffusion_mc_fortransh script respect sourc code compon may found docssourceexamplescpp docssourceexamplesfortran develop tool muscl fairli complex piec softwar coupl librari design link togeth independ bit softwar written differ languag help us develop muscl use varieti tool check work build softwar document requir page describ develop tool use configur build instal main languag muscl python help instal publish python part muscl use setuptools_ setuptool read inform file setuppi root repositori file contain descript muscl use pypi standard onlin python packag repositori inform use pip instal muscl inform requir librari depend setuppi specifi exact version number rather atleast version number way sure incompat chang introduc break muscl howev also mean depend get date new version releas keep uptod use requiresio_ web servic scan setuppi check version latest releas produc button emb readmerst show whether uptod like outdat depend quit often rapid updat fact life today open sourc world immedi problem older version still avail muscl work updat regularli stay current avoid potenti secur issu qualiti control muscl infrastructur use build infrastructur model scientif experi import reliabl easi use easi develop furthermor frequent use inexperienc programm look muscl exampl write good code therefor import muscl wellimpl high qualiti program make sure happen use static check lint unit test integr test static check qualiti control system use sever tool call central makefil standard develop environ command make test top directori run python standard code standard known pep specifi python code format consist write code accord pep make easier read make easier new develop get start use pep plugin_ pytest see check format although python dynamicallytyp languag support type annot use static type check write code type annot sometim take bit think without increas reliabl program lot type check detect mistak unit test dont use type annot use mypy_ check part set qualiti control softwar final use codacy_ onlin tool run variou static check tool repositori run automat main branch well everi pull request codaci tend give fals posit fairli often set tune specif warn set ignor codaci warn pull request necessarili problem review either fix disabl appropri test muscl suit test unit test test small bit code one piec time integr test test whether goe togeth correctli run test measur test coverag continu integr case forget run test manual main test framework python part code pytest_ python librari provid librari function make easier write test case runner automat detect test run test locat test subdirectori code integration_test directori root repositori variou place code file name conftestpi locat contain test fixtur file pick automat pytest file root directori caus pytest add path pythonpath python find modul test import test case doesnt work integr test there separ include_libmusclepi set path correctli use code coverag plugin pytest measur line code execut test importantli line arent ideal code cover practic thing difficult test import enough warrant test coverag nice sometim challeng target aim plugin use python coverag librari configur coveragerc eg gener code exclud test test run local use make test also run cloud via travisci_ everi push github repositori travi run test report code coverag codacy_ integr lint result dashboard also report back github ad icon eg pull request signal whether test pass document muscl document live repositori togeth code much prefer arrang separ wiki previou muscl wiki tend get lost sourc document docssourc written restructuredtext_ process html sphinx_ program use sphinxautodoc_ plugin extract docstr python sourc code convert api document sphinx configur via docssourceconfpi file contain hook automat run sphinxautodoc whenev sphinx run run separ first readthedocs_ onlin servic configur automat render document display onlin use sphinx support sphinxautodoc use aforement hook _setuptool httpssetuptoolsreadthedocsio _requiresio httpsrequiresio _pep plugin httpspypipythonorgpypipytestpep _mypi httpsmypyreadthedocsio _codaci httpssupportcodacycom _pytest httpspytestorg _travisci httpsdocstraviscicom _restructuredtext httpdocutilssourceforgenetrsthtml _sphinx httpwwwsphinxdocorg _sphinxautodoc httpwwwsphinxdocorgenmasterextautodochtml _readthedoc httpsreadthedocsorg muscl road map implement log server side mmp log call manag logger compon unit test continu integr document build lint implement log client side libmuscl log api initi mmp client muscl use case road map use case probabl far hope mark louren add chang around make progress natur muscl app two coupl submodel run within work station muscl app three coupl submodel run within work station muscl app two coupl submodel run differ node use tcp commun muscl app three coupl submodel run differ node use tcp commun muscl app two coupl submodel run differ node use mpi commun muscl app three coupl submodel run differ site use tcpmpwide commun muscl mpi mpi messag pass interfac wide use commun middlewar highperform comput lowlevel also usual well optimis perhap importantli standard mani exist hpc applic use mpi commun either directli librari chanc therefor run submodel use mpi want connect muscl muscl support c fortran alway mpi extra care need taken thing run parallel mpi follow singleprogram multipl data paradigm mean mani copi program run simultan thing except data theyr process differ copi everi copi commun muscl part simul follow process make instanc process run reus loop process call send receiv function time two except configur port may done root process get set done anytim anywher section show use muscl mpi c fortran base reactiondiffus model given c fortran section reaction model use mpi help youv read python tutori c fortran section first experi mpi brows tutori help sourc code exampl section httpsgithubcommultiscalemuscletreemasterdocssourceexamplescpp_ also go docssourceexamplescpp sourc directori that easiest handi script makefil copypast code fortran also onlin version httpsgithubcommultiscalemuscletreemasterdocssourceexamplesfortran_ version local sourc tree docssourceexamplesfortran build run exampl youv built instal c version libmuscl your set build exampl go docssourceexampl subdirectori sourc directori type muscle_homeprefix muscle_enable_mpi make cpp python exampl compil link new libmuscl fortran use muscle_homeprefix muscle_enable_mpi make fortran python instead order run exampl youll need python version muscl instal need muscl manag python need ad make command build system set virtual environ docssourceexamplespythonbuildvenv everyth need run exampl run exampl use provid script docssourceexampl codeblock bash muscle_sourcedocssourceexampl muscle_homemuscl reaction_diffusion_mpi_cppsh muscle_sourcedocssourceexampl muscle_homemuscl reaction_diffusion_mpi_fortransh note exampl compil slightli differ option compar nonmpi exampl use well compil mpibas submodel see instal section detail mpi reaction model candmpi version reaction model literalinclud examplescppreaction_mpicpp caption docssourceexamplescppreaction_mpicpp languag cpp fortranandmpi version reaction model literalinclud examplesfortranreaction_mpif caption docssourceexamplesfortranreaction_mpif languag fortran well go top bottom one piec time focus differ plain c fortran version header modul codeblock cpp caption c includ mpih includ libmusclelibmusclehpp includ ymmslymmslhpp order use mpi need includ mpi header header libmuscl unchang rememb compil muscle_enable_mpi defin howev chang api slightli shown codeblock fortran caption fortran use mpi use ymmsl use libmuscle_mpi fortran use mpi modul abl make mpi call libmuscle_mpi get mpienabl version muscl api codeblock cpp caption c void reactionint argc char argv const int root_rank int rank num_rank mpi_comm_rankmpi_comm_world rank mpi_comm_sizempi_comm_world num_rank codeblock fortran caption fortran integ paramet root_rank integ rank num_rank ierr call mpi_comm_rankmpi_comm_world rank ierr call mpi_comm_sizempi_comm_world num_rank ierr mpi parallel process equal time time someth must done one process one process need declar special call root process usual one rank zero that well ask mpi rank current process total number process creat instanc codeblock cpp caption c instanc instanceargc argv operatorf_init initial_st list doubl operatoro_f final_st list doubl mpi_comm_world root_rank codeblock fortran caption fortran port libmuscle_portsdescription_cr call libmuscle_portsdescription_addport ymmsl_operator_f_init initial_st call libmuscle_portsdescription_addport ymmsl_operator_o_f final_st instanc libmuscle_instance_createport mpi_comm_world root_rank call libmuscle_portsdescription_freeport muscl use mpi mode instanc constructor take two extra argument mpi commun rank root process default mpi_comm_world respect muscl creat copi given commun intern use one pass must contain process submodel muscl commun submodel process given root rank process special send receiv describ reus loop set codeblock cpp caption c instancereuse_inst f_init doubl t_max instanceget_setting_asdoublet_max doubl dt instanceget_setting_asdoubledt doubl k instanceget_setting_asdoublek codeblock fortran caption fortran libmuscle_instance_reuse_instanceinst f_init t_max libmuscle_instance_get_setting_as_realinst t_max dt libmuscle_instance_get_setting_as_realinst dt k libmuscle_instance_get_setting_as_realinst k part unchang nonmpi version mean process enter reus loop togeth mpi enabl reuse_inst effect collect oper must call process simultan set may obtain point mpi process get set valu requir mpi activ done way like long within reus loop distribut state codeblock cpp caption c stdvectordoubl u u_al int u_siz doubl t_cur t_end codeblock fortran caption fortran real selected_real_kind t_cur t_max t_end dt k integ u_siz u_all_s real selected_real_kind dimens allocat u u_al state reaction model vector doubl mpi version well divid state among process process part u variabl exist process contain piec total state u_al contain complet state root process empti rest process u_siz size u t_cur t_end process contain respect current simul time time end current run receiv messag next time time receiv initi state codeblock cpp caption c auto msg instancereceiveinitial_st codeblock fortran caption fortran rmsg libmuscle_instance_receiveinst initial_st receiv function anoth collect oper must call process process block messag receiv messag return root process design creat instanc process empti dummi messag return may seem bit odd receiv root process return receiv messag process good reason mpi need wait someth goe loop continu check whether event occur spinloop keep cpu core run fulli load receiv root process use broadcast oper distribut data root process would block without use cpu network receiv call model done process would spin frantic keep almost core occupi sinc macromicro model altern execut often nice put core work wait model doesnt load run muscl solv problem use tcpbase barrier call receiv process block network receiv call without use cpu messag receiv continu messag sent root muscl know whether need broadcast process distribut somehow youll part codeblock cpp caption c rank root_rank dataconstref datamsgdata u_allresizedatas int datas u_al dataiasdoubl t_cur msgtimestamp t_end t_cur t_max u_siz u_alls num_rank u_siz num_rank u_alls instanceerror_shutdownst divid evenli throw stdruntime_errorst divid evenli codeblock fortran caption fortran rank root_rank rdata libmuscle_message_get_datarmsg u_all_s libmuscle_dataconstref_sizerdata alloc u_allu_all_s u_all_s item libmuscle_dataconstref_get_itemrdata inti libmuscle_s u_al libmuscle_dataconstref_as_realitem call libmuscle_dataconstref_freeitem end call libmuscle_dataconstref_freerdata t_cur libmuscle_message_timestamprmsg t_end libmuscle_message_timestamprmsg t_max call libmuscle_message_freermsg u_siz u_all_s num_rank u_siz num_rank u_all_s call libmuscle_instance_error_shutdowninst state divid evenli print state divid evenli stop end end start root process unpack receiv list u_al set current final time also calcul size perprocess portion state check divid evenli doesnt tell muscl weve encount error either root process process simultan rais except exampl compl configur cell long grid two mpi process itll work well next distribut receiv inform among process codeblock cpp caption c mpi_bcastu_s mpi_int root_rank mpi_comm_world uresizeu_s mpi_scatteru_alldata u_siz mpi_doubl udata u_siz mpi_doubl root_rank mpi_comm_world mpi_bcastt_cur mpi_doubl root_rank mpi_comm_world mpi_bcastt_end mpi_doubl root_rank mpi_comm_world codeblock fortran caption fortran call mpi_bcastu_s mpi_int root_rank mpi_comm_world ierr alloc uu_siz call mpi_scatteru_al u_siz mpi_doubl u u_siz mpi_doubl root_rank mpi_comm_world ierr call mpi_bcastt_cur mpi_doubl root_rank mpi_comm_world ierr call mpi_bcastt_end mpi_doubl root_rank mpi_comm_world ierr fairli standard mpi code first broadcast size perprocess state necessari deriv receiv messag receiv root process next make space u new state inform scatter u_al u vector process current time end time also deriv receiv messag need broadcast well next state updat loop complet unchang process process part state sinc reaction grid cell affect anyth outsid grid cell dont need commun could cours eg diffus model need send data neighbour that musclerel though refer mpi tutori inform final done iter need send final state codeblock cpp caption c o_f mpi_gatherudata u_siz mpi_doubl u_alldata u_siz mpi_doubl root_rank mpi_comm_world rank auto result datanilsu_alls int u_alls resulti u_al instancesendfinal_st messaget_cur result codeblock fortran caption fortran o_f call mpi_gatheru u_siz mpi_doubl u_al u_siz mpi_doubl root_rank mpi_comm_world ierr rank root_rank sdata libmuscle_data_create_nilsintu_all_s libmuscle_s u_all_s call libmuscle_data_set_itemsdata inti libmuscle_s u_al end smsg libmuscle_message_createt_cur sdata call libmuscle_instance_sendinst final_st smsg call libmuscle_message_freesmsg call libmuscle_data_freesdata dealloc u_al end send function call either root process process latter case simpli someth root process return immedi process sometim give cleaner code though option case go send root process first use gather oper process collect data local u variabl root u_al convert data object send root process mpi requir initialis finalis c main function codeblock cpp int mainint argc char argv mpi_initargc argv reactionargc argv mpi_fin return exit_success fortran version exampl main program note mpi_init must call muscl instanc creat sinc instanc constructor make mpi call order mpi_fin less strict symmetri free instanc first fortran version c done automat end reaction function distribut execut previou section creat simpl macromicro multiscal model muscl ran singl python script section briefli explain go distribut simul possibl multipl node note distribut simul easi use would like yet necessari piec place howev explain work want run exampl use premad script go docsexampl directori sourc code set run python exampl like codeblock bash docsexampl make python docsexampl reaction_diffusion_pythonsh explain work run hand make separ instanc previous start simul start singl python script contain implement also model configur distribut run want run instanc separ script need split simpl copi model function anyth depend new file add main claus run reaction model previou exampl look like literalinclud examplespythonreactionpi caption docssourceexamplespythonreactionpi languag python note code exactli weve remov everyth relat diffus model coupl diffus model literalinclud examplespythondiffusionpi caption docssourceexamplespythondiffusionpi languag python exactli code split separ file ymmsl file distribut setup manag instanc run separ program commun via network make work manag start first ymmsl file describ simul ymmsl file correspond previou exampl look like literalinclud examplesreaction_diffusionymmsl caption docssourceexamplesreaction_diffusionymmsl languag yaml see look much like object represent load ymmsl file object use ymmslload save back use ymmslsave start manag everi muscl simul need manag manag help instanc find distribut set start manag run codeblock bash venv muscle_manag reaction_diffusionymmsl environ youv instal muscl manag start print locat standard output network address listen connect instanc start instanc start instanc work like start python script codeblock bash venv python reactionpi muscleinstancemicro origin script made dictionari map comput element name python function muscl use start submodel instanc need pass inform instead function name start particular script pass instanc name use muscleinst argument note argument parser flexibl need written exactli like cours instanc name need match comput element name ymmsl file pass manag instanc start regist manag sinc didnt pass locat use musclemanagerhostport option muscl tri connect default locat localhost manag conveni listen micro instanc regist look muscle_managerlog file produc manag directori start find record need start second submodel way codeblock bash venv python diffusionpi muscleinstancemacro simul run done instanc disconnect manag shut automat current statu current releas includ necessari featur run multiscal simul nondistribut distribut mode python c make releas suitabl prototyp learn work muscl multiscal model gener product work use python c model particular muscl current provid follow featur coupl differ submodel instanc muscl connect simultan run instanc differ submodel togeth base mmsl descript singl instanc connect set instanc via socal vector port muscl allow peer instanc find transmit messag peertop fashion commun model therefor suffer bottleneck creat central compon spatial tempor scale separ overlap macromicro coupl model time scale separ micromodel need run time step macromodel muscl model run repeatedli make possibl macromodel fix number timestep eg run converg known advanc occur number requir run micromodel unknown beforehand well muscl automat coordin model execut order ensur exactli right number run happen deadlock occur time scale overlap model run simultan exchang inform via muscl run interpol may need synchronis data exchang messag pass model via muscl carri simulationtim timestamp allow implement suitabl interpol compon spatial scale separ usual mani instanc micromodel need run cover macroscal domain need link macromodel describ mmsl implement use muscl adjac spatial scale inform need exchang micromodel instanc effect equival domain decomposit muscl yet practic computeintens model usual intern anyway major limit although would nice muscl also support timedomain adjac say process occur anoth one way semant superset scientif workflow system set manag model mani model paramet set determin simul proce larg coupl simul manag set tediou need distribut variou configur file wors sourc file need put correct locat model pick muscl set defin ymmsl file defin simul run queri submodel simplifi deploy collect metadata ensur set use differ model alway unless explicitli set differ valu uncertainti quantif sensit analysi ensembl usual run valu paramet vari amongst ensembl member muscl compon introduc simul connect set instanc inject differ valu set one make possibl implement advanc semiintrus method effici uq sa multiscal model combin featur power featur mmsl muscl abil arbitrarili combin featur singl model instanc macromicro model exhibit time scale spatial scale separ set instanc reus mani time make set ie set macromodel instanc set set micromodel instanc attach uq sampler macromodel order run uncertainti quantif overlaid paramet propag automat muscl correct micromodel instanc scenario could includ combin two macromicro setup macromesomicro model connect macromodel ensembl stochast micromodel via compon replic messag macromodel micromodel instanc anoth compon calcul ensembl mean result pass back macromodel featur import muscl tool scientif research muscl develop predict invent futur flexibl greatli increas probabl abl use muscl implement ongo develop languag support current muscl support python c fortran cover quit exist model comput scienc support languag still need mainli entail port libmuscl manag separ program write tool manipul ymmsl file probabl best done python next list term languag support c possibl java perhap languag feel strongli support specif languag pleas make issu github httpsgithubcommultiscalemuscleissues_ distribut execut distribut execut offici support although yet wide test want experi laptop supercomput pleas look distribut execution_ section manual plan use qcg pilotjob httpsgithubcomvecmaprojectqcgpilotjob_ make run simul insid cluster alloc easier order avoid write job script stage file manual kind launcher need collabor vecma project httpswwwvecmaeu_ get muscl support fabsim httpsfabsimreadthedocsioenlatest_ dynam instanti simul requir vari amount comput resourc cours run instanc time taken set micromodel may depend state macromodel chang cours simul case may necessari chang number instanc micromodel simul muscl yet support kind pilot job framework qcg pilotjob httpsgithubcomvecmaprojectqcgpilotjob_ integr muscl make work note case resourc alloc user schedul whether use affect cost simul core hour energi use cours affect case wallclock time reduc redistribut avail resourc fewer need instanc also run cloud may possibl return resourc longer need avoid pay simpl case repeat instanti micromodel taken care model reus facil muscl offer dynam instanti need profil muscl contain partial implement simpl profil measur amount time take send messag instanc measur taken inform sent manag yet save disk process yet support c simpl addit tutori python section well look exampl use muscl creat multiscal simul python sourc code exampl httpsgithubcommultiscalemuscletreemasterdocssourceexamplespython_ also clone repositori download sourc see c part instal section go docssourceexamplespython copypast code easiest way get set creat virtualenv instal muscl addit requir insid run make examplespython directori make virtual environ examplespythonbuildvenv codeblock bash examplespython make hand examplespython python venv buildvenv creat venv examplespython buildvenvbinactiv activ examplespython pip instal r requirementstxt instal depend get error messag say amongst other error invalid command bdist_wheel tri run pip instal wheel pip instal r requirementstxt fix administr right aptget instal pythonwheel also work fix issu whole system run exampl describ activ virtual environ run file reaction_diffusionpi codeblock bash examplespython buildvenvbinactiv exmaplespython python reaction_diffusionpi first exampl reactiondiffus model grid consist reaction model coupl diffus model macromicro fashion diffus model macromodel reaction model micromodel macromicro model timescal separ micro model full run mani timestep everi timestep macromodel thu macromodel effect call micromodel state updat send current state use output input state updat oper here implement muscl detail explan follow code literalinclud examplespythonreaction_diffusionpi caption docssourceexamplespythonreaction_diffusionpi languag python let take step step import header codeblock python collect import ordereddict import log import os import numpi np libmuscl import grid instanc messag libmusclerunn import run_simul ymmsl import computeel conduit configur model oper set usual begin import requir librari ordereddict log come python standard librari numpi provid matrix math function libmuscl import classlibmuscleinst repres model instanc larger simul classlibmusclemessag repres muscl messag pass instanc funclibmusclerun_simul function allow us run complet simul singl python file oppos start differ instanc manag separ order describ model use number definit ymmslpython simpl submodel next reaction model defin singl python function take argument return noth note code use type annot show type function argument return valu ignor python interpret also muscl dont use dont want first step muscl model creat classlibmuscleinst object codeblock python def reaction none instanc instanc operatorf_init initial_st list float operatoro_f final_st list float constructor take singl argument dictionari map oper list port port use submodel exchang messag outsid world port input port output port time model singl input port name initial_st receiv initi state begin model run singl output port name final_st send final state reaction simul rest simul note type data sent document comment obvious requir make life lot easier someon els need use code havent look highli recommend avail type describ oper becom clear shortli reus loop codeblock python instancereuse_inst f_init state updat loop o_f classlibmuscleinst object start reus loop multiscal simul submodel often run multipl time instanc theyr use micromodel part ensembl complet parallelis order accomplish entir model wrap loop exactli loop end depend behaviour whole model easi determin fortun muscl us call methlibmuscleinstancereuse_inst method initialis set receiv messag codeblock python instancereuse_inst f_init t_max instanceget_settingt_max float dt instanceget_settingdt float k instanceget_settingk float msg instancereceiveinitial_st u msgdataarraycopi t_cur msgtimestamp next first part model state initialis pretti much everi model initialis phase begin muscl abstract idea submodel submodel execut loop part code refer f_init oper ask muscl valu set go need later particular total time simul time step use model paramet k second argument specifi expect type option given muscl check user specifi valu correct type rais except note get set need happen within reus loop lead incorrect result get set receiv initi state initial_st port note declar port declar associ f_init oper f_init messag receiv sent declar make initial_st receiv port messag receiv contain sever bit inform interest data attribut assum grid float contain initi state well call u msgdata attribut hold object type classlibmusclegrid hold readonli numpi array option list index name take array make copi u modifi u upcom state updat without call copi u would end point readonli array wed get error messag tri modifi final well initialis simul time time state valid contain timestamp attribut doubleprecis float contain number simul wallclock second sinc whole simul start state updat loop codeblock python f_init t_cur dt msgtimestamp t_max o_i u k u dt t_cur dt o_f initialis model time state updat loop code look familiar loop reach maximum time rel start iter updat state accord model equat updat call oper submodel execut loop model determin entir current state sinc inform outsid need receiv messag classlibmuscleinst declar declar port associ oper submodel execut loop specifi anoth oper within state updat loop call o_i come oper provid observ intermedi state word send messag outsid world part current state case o_i oper empti send anyth make model bit less reusabl wont work macromodel like perfectli legal muscl tri hard let break rule unless would break model case tri give help error messag send final result codeblock python o_f instancesendfinal_st messaget_cur none gridu x updat loop done model arriv final state finish share final state outsid world send final_st port part code state updat loop still within reus loop known o_f oper submodel execut loop declar port live classlibmuscleinst declar send messag specifi port send must match declar name oper messag object contain current simul time current state convert plain python list option second paramet second timestamp discuss set none muscl use messagepack httpsmsgpackorg_ encod messag model messagepack binari encod format thought binari version json mean messag integ float bool string list dictionari contain muscl also support numpi array byte array like json nest send dictionari contain list float exampl messagepack selfdescrib inspect receiv messag find sent case data send particular port type expect data particular format receiv intent chose selfdescrib format keep chang definit recompil bind everi time chang send downsid make difficult see sent someon els submodel pleas make sure document port data type your expect send futur colleagu possibl futur self thank messagepack extens format sinc send grid common kind model muscl support send numpi array directli wrap array u classlibmusclegrid object add name dimens case there one x descript could also pass u directli case muscl would sent classlibmusclegrid without index name automat note grid numpi array much effici list dictionari lot data send use much possibl exampl set agent best sent dictionari numpi array one arraygrid attribut list dictionari quit bit slower use lot memori work million object final want use encod send byte object transmit asi minim overhead conclud reaction model see submodel use muscl much look like would without one addit variabl one extra loop send receiv statement your readi connect model larger simul messag timestamp order make coupl simul need least two model second model diffus model overal structur reaction model addit featur first o_i oper codeblock python o_i t_next t_cur dt t_next dt t_max t_next none cur_state_msg messaget_cur t_next gridu x instancesendstate_out cur_state_msg sinc diffus model macrosubmodel model need send state outsid world everi timestep done o_i oper messag simpli contain state convert classlibmusclegrid sent state_out port declar o_i oper made classlibmuscleinst model messag sent current simul time second timestamp give simul time next messag sent port sinc time step fix easi calcul need take care send none final messag port howev sinc wont anoth messag case deserv bit explan first muscl use timestamp attach messag anyth particular case alway send none second timestamp work fine timestamp necessari two submodel timescal overlap need connect togeth case model run concurr exchang messag o_i oper time scale step size match exactli number messag sent one submodel match number messag submodel tri receiv one end wait bring whole simul halt avoid intermedi compon need insert interpol messag order send receiv correct order compon need know next messag sent second timestamp requir make submodel gener usabl good set second timestamp perhap your tri connect exist codebas use vari timestep size easi get tell big next timestep case your time scale overlap put none move next problem itll work fine receiv messag default codeblock python msg instancereceivestate_in defaultcur_state_msg msgtimestamp t_cur dt loggerwarningreceiv messag futur npcopyt msgdataarray diffus model macromodel need receiv input state updat micromodel call methlibmuscleinstancerec receiv bit special pass default messag default messag return port connect cleverli pass messag contain current state port connect model continu current state sinc muscl simpli ignor send command disconnect port make possibl run diffus model without micromodel attach cours sensibl default valu avail case one use like good idea next check didnt receiv messag futur happen micromodel run longer macromodel timestep case number step fix warn never emit howev micromodel run detect converg happen run longer timestep macromodel would indic timescal separ anymor case result could wrong warn appropri copi receiv data state array receiv classlibmusclegrid object contain readonli array write u msgdataarray would discard state u instead make variabl u refer receiv readonli array would get error messag tri updat state npcopyto function instead copi readonli content msgdataarray exist writabl array refer u way state updat also bit effici realloc memori time oper call laplacian function shown requir submodel singl function split call librari function toplevel function howev want run one submodel singl python program also share data compon send receiv messag particular cant use global variabl commun model intent doesnt work your run separ program differ comput connect togeth model defin need instruct muscl connect togeth creat object type ymmslconfigur contain inform need run simul often help draw diagram first figur reaction_diffusionpng scale align center gmmsl diagram reactiondiffus model gmmsl diagram reactiondiffus model show two comput element name macro micro conduit connect port state_out macro state_in micro symbol end conduit show oper port belong o_i macrostate_out f_init microstate_in anoth conduit connect port microfinal_st o_f macrostate_in note there mnemon oper o_i within state updat loop circular symbol f_init o_f use diamond shape also fill symbol design port messag sent open symbol design receiv port therefor see state updat macro send state_out micro full run send final result input next state updat macro sinc diagram arent valid python need altern way describ model code use ymmsl librari creat set object form descript codeblock python element computeelementmacro diffus computeelementmicro reaction first describ two comput element model comput element submodel helper compon convert data control simul otherwis implement requir nonmodel function simpl exampl two submodel one name macro one name micro macro implement implement name diffus micro implement implement name reaction name comput element use muscl address commun model implement name intend use launcher would start correspond program creat instanc comput element instanc form actual run simul codeblock python conduit conduitmacrostate_out microinitial_st conduitmicrofinal_st macrostate_in model modelreaction_diffus element conduit next need connect comput element togeth done conduit sender receiv connect send port state_out comput element macro receiv port initial_st comput element micro note port actual defin implement configur file refer comput element conduit togeth form model name two set compon codeblock python set settingsordereddict microt_max e microdt e macrot_max e macrodt e x_max dx k e reaction paramet e diffus paramet configur configurationmodel set final defin set simul use ordereddict instead normal unord python dictionari logic order realli realli use your tri edit quickli find thing complex model youll mani set order allow group logic cours order sourc code chang save yaml want preserv order ordereddict requir unoffici python offici python dict order compat older version well use ordereddict note two duplic name two model t_max dt muscl creat global set name set valu everywher handi set use multipl comput element prepend name comput element set valu specif one specif set go gener one specifi microt_max t_max micro comput element use microt_max other use t_max model set combin configur contain everyth need run simul configur object also pythonsid equival ymmsl yaml file launch simul launch simul strictli speak outsid scope muscl primarili coordin help instanc find commun send messag howev test experiment learn small scale product use mean run whole simul singl python file nice muscl small facil form funclibmusclerun_simul function codeblock python implement diffus diffus reaction reaction run_simulationconfigur implement make dictionari map implement name correspond python function pass configur implement funclibmusclerun_simul start muscle_manag implement wait simul finish note actual fork separ process manag implement real distribut simul albeit singl machin make mode oper realist test case real distribut run hpc machin smooth transit larger comput resourc log output run script eg use codeblock bash venv python python reaction_diffusionpi pop plot show state simul system time machin without graphic support get error messag run say someth like couldnt connect display case tri command disabl graphic output codeblock bash venv python dontplot python reaction_diffusionpi also find three log file directori muscle_managerlog musclemacrolog musclemicrolog contain log output manag submodel instanc respect log messag usual python way model muscl automat take care write log file messag level warn higher sent manag log well help give overview went wrong singl place case error note default python muscl log messag level warn higher add statement like codeblock python logginginfosom use inform youll find show either log file info lower level warn get less local log output eg musclemacrolog use one command codeblock python least output logginggetloggersetlevelloggingcrit logginggetloggersetlevelloggingerror logginggetloggersetlevelloggingwarn logginggetloggersetlevellogginginfo logginggetloggersetlevelloggingdebug output minimum log level send messag central log file muscle_managerlog set muscle_remote_log_level set exampl chang exampl read codeblock python set settingsordereddict muscle_remote_log_level debug microt_max e microdt e macrot_max e macrodt e x_max dx k e reaction paramet e diffus paramet log messag submodel sent manag log slow simul mani log statement good use debug learn increas level product run muscl document master file creat sphinxquickstart wed apr adapt file complet like least contain root toctre direct welcom muscl document muscl third incarn multiscal coupl librari environ muscl connect multipl simul model togeth multiscal simul simul model simpl singl python file complex combin multipl separ simul code written c fortran run hpc machin use muscl scientif work pleas cite version muscl softwar use httpswwwresearchsoftwarenlsoftwaremuscle_ follow paper veen le hoekstra ag eas multiscal model design coupl muscl krzhizhanovskaya v et al ed comput scienc icc icc lectur note comput scienc vol springer cham httpsdoiorg__ toctre maxdepth caption content introduct current_statu instal tutori distributed_execut cplusplu fortran mpi uncertainty_quantif python_api cpp_api fortran_api contribut devtool releas indic tabl refgenindex refmodindex refsearch api document c page provid full document c api muscl note place class refer libmuscleimplclass bug document render process class actual avail libmuscleclass use namespac libmuscl doxygenclass libmuscleimpldata doxygenclass libmuscleimpldataconstref doxygenclass libmuscleimplinst doxygenclass libmuscleimplmessag doxygentypedef libmuscleimplportsdescript namespac ymmsl doxygenfunct ymmslimplallows_send doxygenfunct ymmslimplallows_receiv doxygenclass ymmslimplconduit doxygenclass ymmslimplidentifi doxygenfunct ymmslimploperatorstdostream identifi const doxygenenum ymmslimploper doxygenstruct ymmslimplport doxygenclass ymmslimplrefer doxygenfunct ymmslimploperatorstdostream refer const doxygenclass ymmslimplreferencepart doxygenclass ymmslimplset doxygenfunct ymmslimploperatorstdostream ymmslimplset const doxygenclass ymmslimplsettingvalu doxygenfunct ymmslimploperatorstdostream ymmslimplsettingvalu const introduct welcom muscl muscl third incarn multiscal coupl librari environ successor muscl purpos make creat coupl multiscal simul easi enabl effici uncertainti quantif model use advanc semiintrus algorithm muscl use multiscal model simul languag mmsl describ structur multiscal model mmsl express form diagram gmmsl yet implement yaml file ymmsl conveni peopl softwar mmsl let one describ comput element submodel scale bridg data convert uq compon etc multiscal model consist mani instanc need wire togeth muscl intend scale laptop exascal low end support nondistribut parallel mode entir multiscal simul includ comput element implement mmsl configur singl short python file next distribut mode manag comput element instanc start multipl node cluster commun directli one anoth beyond addit compon optimis envis would allow scale huge machin combin multipl machin goal make transit mode smooth possibl extra comput power ad gradual need muscl consist three compon libmuscl ymmslpython muscle_manag libmuscl librari use connect comput element implement eg new exist model coupl simul offer function send receiv messag outsid world determin whether restart model end run variou util like centralis set conveni uq centralis log make debug easier basic profil ymmslpython python librari contain class definit repres mmsl model descript support load ymmsl file convert object save object ymmsl file input valid clear error messag provid case error output format good readabl courtesi yatiml httpsyatimlreadthedocsio_ librari ymmsl file also contain set inform need simul run describ singl file muscle_manag central runtim compon muscl start togeth comput element intanc provid central coordin point instanc use find manag also collect log messag individu instanc aid debug profil inform aid schedul perform optimis api document python automodul libmuscl member undocmemb showinherit automodul libmusclerunn member run_simul muscl c section show use muscl c base reactiondiffus model given python tutori sourc code exampl section httpsgithubcommultiscalemuscletreemasterdocssourceexamplescpp_ also go docssourceexamplescpp sourc directori that easiest handi script makefil copypast code build run exampl youv built instal c version libmuscl your set build exampl go docssourceexampl subdirectori run make pass instal locat muscl codeblock bash muscle_sourc cd docssourceexampl muscle_sourcedocssourceexampl muscle_homemuscl make cpp also need python version muscl instal muscl manag come need run simul set codeblock bash muscle_sourcedocssourceexampl make python run exampl use provid script docssourceexampl codeblock bash muscle_sourcedocssourceexampl muscle_homemuscl reaction_diffusion_cppsh log output run muscl simul manag produc muscle_managerlog file log messag collect submodel set log level c instanc ad muscle_remote_log_level set ymmsl file valu debug info warn error critic default warn pretti quiet info give output also slow thing bit messag sent manag run script redirect standard standard error instanc file find output produc submodel reactiondiffus c page assum youv least read python tutori well thing c c version libmuscl doesnt support run multipl comput element singl program go distribut version reactiondiffus exampl c here basic reaction model without muscl support c reaction model codeblock cpp caption simpl reaction model grid c void reaction f_init doubl t_max e doubl dt e doubl x_max doubl dx doubl k stdvectordoubl ulrintx_max dx u u u doubl t_cur t_cur dt t_max o_i doubl u u u k u dt t_cur dt o_f one simplest possibl comput model set paramet creat state variabl u initialis state updat state loop reach final simul time muscl version c look quit similar python version literalinclud examplescppreactioncpp caption docssourceexamplescppreactioncpp languag cpp well go top bottom one piec time header codeblock cpp includ cstdlib includ libmusclelibmusclehpp includ ymmslymmslhpp use libmuscledata use libmuscledataconstref use libmuscleinst use libmusclemessag use ymmsloper includ header import class well need root namespac cstdlib exit_success constant bottom need muscl c api mirror python api applic libmuscl ymmsl like python howev c separ ymmsl librari instead class need includ libmuscl mean support manipul ymmsl file c two class dont python equival data dataconstref use creat instanc codeblock cpp void reactionint argc char argv instanc instanceargc argv operatorf_init initial_st list doubl operatoro_f final_st list doubl reaction function chang bit take command line paramet argument like python version c libmuscl take inform command line c need pass explicitli instanc object otherwis construct instanc pass dictionari map oper list port descript see portsdescript api document like python version well pass list doubl model reus loop set codeblock cpp instancereuse_inst f_init doubl t_max instanceget_setting_asdoublet_max doubl dt instanceget_setting_asdoubledt doubl k instanceget_setting_asdoublek python reus loop except syntax differ languag code exactli get set work shown c static type languag need specifi type expect python actual type differ except thrown support type set stdstring bool int_t doubl stdvectordoubl stdvectorstdvectordoubl also get_set member function return settingvalu object settingvalu contain valu type queri see receiv messag dataconstref instead initialis state constant go receiv messag f_init port initi state codeblock cpp auto msg instancereceiveinitial_st auto data_ptr msgdataelementsdoubl stdvectordoubl udata_ptr data_ptr msgdatas call receiv method instanc yield object type libmusclemessag python simpl class sever public member c member wrap accessor api conceptu syntax slightli differ interest data sent us use msgdata access return object type libmuscledataconstref type new c version librari exist c static type languag muscl simul type data sent messag vari messag messag need kind class contain data mani differ type that data dataconstref key properti dataconstref dataconstref like refer point actual data object type copi second dataconstref dataconstref variabl point object like python java dataconstref constant chang data dataconstref memori manag dataconstref automat there need delet free anyth object delet memori data dataconstref object point gone like python java dataconstref variabl inspect see type data contain data extract c variabl correct type code dont bother check instead blindli assum weve sent grid doubl grid except thrown program halt that okay mean there someth wrong somewher need fix muscl design let get away bit sloppi long thing actual go right check problem let know someth goe wrong grid muscl ndimension array number boolean shape size dimens size total number element storag order say order element arrang memori option name index expect grid doubl vector number storag order irrelev well use standard c stdvector class contain state constructor take pointer array object appropri type number copi object use cppfuncdataconstrefel get pointer element cppfuncdataconstrefs get number element that need creat state vector u note muscl case check right type element doubl know therefor check expect grid could check hand check length msgdatashap see see diffus model exampl codeblock cpp doubl t_cur msgtimestamp t_cur dt msgtimestamp t_max o_i doubl u u u k u dt t_cur dt main loop model almost unchang get start time receiv messag timestamp synchronis overal simul time correctli stop time adjust accordingli well send messag data codeblock cpp o_f auto result datagridudata usiz x instancesendfinal_st messaget_cur result comput final state send outsid world final_st port case need send grid doubl first need wrap data object data object work like dataconstref except isnt constant thu modifi fact refer like dataconstref despit name automat memori manag well creat data contain grid pass pointer number u shape grid element array grid dimension third argument contain name index help avoid confus index x rowcolumn latitudelongitud get idea requir add muscl doesnt use someon els use code grate point futur data item construct send messag contain current timestamp data final_st port note differ way creat messag depend whether set next timestamp use explicit set overlay see api document detail data quit versatil make easier send data variou type submodel exampl creat data object contain differ kind data codeblock cpp creat data contain nil valu none python data string boolean data dstring data data dtrue variou kind number data int data du unsign int data dl long int data df float data doubl constant list auto dataliststr data true u dictionari auto datadict x x note key must string why_not datalist that fine existing_object grid stdvectordoubl array auto datagridarraydata row col byte array stdvectorchar byte auto databyte_arraybytesdata bytess simpl type creat automat make messag instancesendoutput_port messaget_cur stdstring texta text messag instancesendoutput_port messaget_cur text name dict list grid byte array instancesendoutput_port messaget_cur datalista see send complex data type muscl almost easi c python howev bit cost easeofus form extra memori usag your send larg amount data best use mani grid much effici dictionari list particular set object agent exampl much effici sent dictionaryofgrid one dgrid attribut list dictionari latter work million object slower codeblock cpp int mainint argc char argv reactionargc argv return exit_success finish exampl simpl main function run model pass command line argument diffus model youv studi care seen python version diffus model abl understand c diffus model literalinclud examplescppdiffusioncpp caption docssourceexamplescppdiffusioncpp languag cpp exampl directori find handi script call reaction_diffusion_cppsh run c reactiondiffus model local script launch muscl manag instanc submodel wait simul complet top page instruct run exampl also directori c version mont carlo sampler roundrobin load balanc plu script launch extend exampl see uncertainti quantif section learn muscl fortran section show use muscl fortran base reactiondiffus model given python tutori sourc code exampl section httpsgithubcommultiscalemuscletreemasterdocssourceexamplesfortran_ also go docssourceexamplesfortran sourc directori that easiest handi script makefil copypast code build run exampl youv built instal c version libmuscl includ fortran bind your set build exampl go docssourceexampl subdirectori run make codeblock bash muscle_sourc cd docssourceexampl muscle_sourcedocssourceexampl muscle_homemuscl make fortran also need python version muscl instal muscl manag come need run simul set codeblock bash muscle_sourcedocssourceexampl make python run exampl use provid script docssourceexampl codeblock bash muscle_sourcedocssourceexampl muscle_homemuscl reaction_diffusion_fortransh log output run muscl simul manag produc muscle_managerlog file log messag collect submodel set log level fortran instanc ad muscle_remote_log_level set ymmsl file valu debug info warn error critic default warn pretti quiet info give output also slow thing bit messag sent manag run script redirect standard standard error instanc file find output produc submodel reactiondiffus fortran page assum youv least read python tutori well thing fortran fortran version libmuscl doesnt support run multipl comput element singl program go distribut version reactiondiffus exampl fortran here basic reaction model without muscl support fortran reaction model codeblock fortran caption simpl reaction model grid fortran program reaction implicit none real selected_real_kind t_cur t_max dt x_max dx k integ u_siz real selected_real_kind dimens allocat u f_init t_max e dt e x_max dx k u_siz intx_max dx alloc uu_siz u e u u u t_cur t_cur dt t_max o_i u k u dt t_cur t_cur dt end o_f dealloc u end program reaction one simplest possibl comput model set paramet creat state variabl u initialis state updat state loop reach final simul time muscl version fortran look quit similar python version literalinclud examplesfortranreactionf caption docssourceexamplesfortranreactionf languag fortran well go top bottom one piec time modul codeblock fortran use ymmsl use libmuscl implicit none tell fortran well use ymmsl libmuscl modul mirror correspond python packag like c ymmsl support limit need implement comput element load manipul save ymmsl document better done python variabl codeblock fortran typelibmuscle_portsdescript port typelibmuscle_inst instanc typelibmuscle_messag rmsg typelibmuscle_dataconstref rdata item typelibmuscle_messag smsg typelibmuscle_data sdata real selected_real_kind t_cur t_max dt k real selected_real_kind dimens allocat u next time declar variabl extra variabl compar nonmuscl version ftypelibmuscle_portsdescript use describ port well use send receiv muscl need ftypelibmuscle_inst main interfac muscl well receiv messag rmsg ftypelibmuscle_messag variabl extract data rdata item sinc receiv data modifi variabl type ftypelibmuscle_dataconstref send messag smsg well creat ftypelibmuscle_data object put data send note name prefix libmuscl make sure dont collid librari may want use eagleey reader notic dx x_max miss well deriv size state vector model u state receiv rather configur creat instanc codeblock fortran port libmuscle_portsdescription_cr call libmuscle_portsdescription_addport ymmsl_operator_f_init initial_st call libmuscle_portsdescription_addport ymmsl_operator_o_f final_st instanc libmuscle_instance_createport call libmuscle_portsdescription_freeport order talk rest muscl simul need ftypelibmuscle_inst object need pass descript port well use make first creat ftypelibmuscle_portsdescript add port f_init o_f oper creat instanc object pass port final need free portsdescript object sinc fortran automat memori manag care alway free object creat return muscl function your done use free portsdescript dont free instanc sinc need follow part code reus loop set codeblock fortran libmuscle_instance_reuse_instanceinst f_init t_max libmuscle_instance_get_setting_as_realinst t_max dt libmuscle_instance_get_setting_as_realinst dt k libmuscle_instance_get_setting_as_realinst k python reus loop except syntax differ languag code exactli get set work shown fortran static type languag need specifi type expect call differ function actual type differ error print program halt possibl detect handl error instead see get set done via libmuscle_instance_get_setting_as_typ function support type charact logic int bit integ real bit doubl precis real number realarray array doubl precis real realarray array doubl precis real see ffuncapi document libmuscle_instance_get_setting_as_charact detail receiv messag dataconstref instead initialis state constant go receiv messag f_init port initi state codeblock fortran rmsg libmuscle_instance_receiveinst initial_st rdata libmuscle_message_get_datarmsg alloc ulibmuscle_dataconstref_sizerdata call libmuscle_dataconstref_elementsrdata u call libmuscle_dataconstref_freerdata call ffunclibmuscle_instance_rec function instanc port name yield object type ftypelibmuscle_messag contain receiv messag alway use muscl fortran rememb free return messag object done that yet case though still need get receiv data python messag simpl class sever public member fortran object alway access manipul libmuscl function case ffunclibmuscle_message_get_data use get dataconstref object sinc muscl gave us object rememb free done first though well use data initialis state go assum well receiv grid number like equival exampl support languag ffunclibmuscle_dataconstref_s return size array receiv print error stop receiv someth els doesnt size see handl error differ use alloc u array size receiv state copi element array u use ffunclibmuscle_dataconstref_el free rdata object sinc dont need longer well hold rmsg bit longer sinc well need later free object start sound tediou that modern languag like python c unfortun fortran done manual note indic receiv array start usual fortran muscl follow languag your use automat translat grid sent python c receiv item correspond sent item dataconstref object check kind valu contain eg use ffunclibmuscle_dataconstref_is_a_grid_of_r dont bother check instead blindli assum weve sent grid doubl that case error print program halt that okay mean there someth wrong somewher need fix muscl design let get away bit sloppi long thing actual go right check problem let know someth goe wrong want make submodel compon handl differ kind messag inspect function help howev codeblock fortran t_cur libmuscle_message_timestamprmsg t_max libmuscle_message_timestamprmsg t_max call libmuscle_message_freermsg t_cur dt t_max o_i u k u dt t_cur t_cur dt end main loop model almost unchang get start time receiv messag timestamp synchronis overal simul time correctli stop time adjust accordingli well note t_cur t_max number object freed rmsg howev sinc inform need receiv messag free send messag data codeblock fortran o_f sdata libmuscle_data_create_gridu x smsg libmuscle_message_createt_cur sdata call libmuscle_instance_sendinst final_st smsg call libmuscle_message_freesmsg call libmuscle_data_freesdata dealloc u end call libmuscle_instance_freeinst comput final state send outsid world final_st port case need send vector doubl first need wrap data object data object work like dataconstref except isnt constant thu modifi creat data object contain grid valu array u index name x put data data object grid put grid new ftypelibmuscle_messag object call ffunclibmuscle_instance_send function send final free messag data object creat dealloc state origin nonmuscl version conclud reus loop done run model reus loop finish free instanc object quit ftypelibmuscle_data quit versatil make easier send data variou type submodel exampl creat ftypelibmuscle_data object contain differ kind data note free object omit breviti cours model codeblock fortran typelibmuscle_data integ libmuscle_int dimens ar characterlen dimens byte creat data contain nil valu none python libmuscle_data_cr charact string logic libmuscle_data_createstr data libmuscle_data_createtru variou kind number libmuscle_data_cr integ libmuscle_data_create_libmuscle_int bit integ libmuscle_data_create_libmuscle_r bit real libmuscle_data_create_libmuscle_r bit real constant list libmuscle_data_create_list empti list libmuscle_data_create_nils_libmuscle_s list length call libmuscle_data_set_itemd string data call libmuscle_data_set_itemd true call libmuscle_data_set_itemd call libmuscle_data_set_itemd dictionari libmuscle_data_create_dict call libmuscle_data_set_itemd x x call libmuscle_data_set_itemd call libmuscle_data_set_itemd note key must string call libmuscle_data_set_itemd nest want grid ar reshapespread_libmuscle_int libmuscle_data_create_gridar byte array libmuscle_data_create_byte_arraybyt see send complex data type muscl bit difficult fortran python burdensom want send larg amount data use grid array much possibl list dict flexibl also slower take much memori particular set object agent exampl better sent dict array one array attribut list dict latter probabl work million object still slower handl error case your ask muscl someth thing go wrong exampl receiv messag port work port connect unless pass default messag see ffunclibmuscle_instance_rec extract real number ftypelibmuscle_dataconstref contain integ obtain set charact string user set logic valu two way deal situat check advanc go work act accordingli tri check whether success neither easiest muscl print error messag stop program error occur actual usual want check advanc whether oper work depend want want receiv messag could use ffunclibmuscle_instance_is_connect check port connect tri receiv set differ type use libmuscle_instance_is_setting_a_typ data libmuscle_dataconstref_is_a_typ work case howev exampl receiv dictionari may may particular key case anywher els think conveni better tri handl error occur done ad one two extra argument function call expect may fail like codeblock fortran typelibmuscle_dataconstref rdata item integ err_cod characterlen allocat err_msg logic valu receiv rdata omit key key valu logic set variabl valu otherwis set true item libmuscle_dataconstref_get_itemrdata key err_cod err_msg err_cod libmuscle_success print err_msg need dealloc messag deallocateerr_msg valu true els valu libmuscle_dataconstref_as_logicalitem err_cod err_cod libmuscle_success valu true end end note error occur error messag set variabl must dealloc your done use error occur variabl remain unset dealloc need pass variabl error messag option also request error code shown get messag code valid error code valu libmuscle_success error libmuscle_domain_error incorrect input function libmuscle_out_of_rang invalid index libmuscle_logic_error tri someth doesnt make sens libmuscle_runtime_error gener error eg your tri get length scalar port make sens libmuscle_bad_cast valu doesnt type your tri retriev see refapidocsfortran function call see error code return exactli implement note error return bit messi still clean futur version diffus model youv studi care seen python version diffus model abl understand fortran diffus model literalinclud examplesfortrandiffusionf caption docssourceexamplesfortrandiffusionf languag fortran exampl directori find handi script call reaction_diffusion_fortransh run fortran reactiondiffus model local script launch muscl manag instanc submodel wait simul complet top page instruct run exampl also directori fortran version mont carlo sampler roundrobin load balanc plu script launch extend exampl see uncertainti quantif section learn muscl exampl directori contain exampl muscl youv instal muscl httpsmusclereadthedocsioenlatestinstallinghtml_ build run make directori like codeblock bash exampl muscle_homepathtomuscl make build c fortran exampl creat virtualenv run python exampl manag also build languag separ use codeblock bash exampl muscle_homepathtomuscl make python exampl muscle_homepathtomuscl make cpp exampl muscle_homepathtomuscl make fortran note need run python build order abl run c fortran exampl setup requir run manag alway need run muscl simul youv built exampl run use shell script directori eg codeblock bash exampl muscle_homepathtomuscl reaction_diffusion_cppsh also export muscle_hom variabl avoid type time codeblock bash exampl export muscle_homepathtomuscl exampl reaction_diffusion_cppsh libmuscl architectur libmuscl muscl client librari kernel link get access function let part muscl simul kernel written mani languag version libmuscl made languag libmuscl two core respons manag configur inform take care commun instanc also take care execut kernel allow user creat kernel simpli implement set function anoth ancillari task provid centralis log user use libmuscl api talk number subapi coordin api configur api commun api execut api log api api compon contain logic use function implement three main libmuscl compon mmp client configur store commun engin coordin api coordin api consist singl function initialis muscl contact manag perform instanc side muscl initialis process function must alway call first take form constructor central muscl object communc goe init function pass necessari command line argument read remov muscl specif one tell manag use initialis mmp client also pass descript kernel pass manag via mmp client registr coordin api use mmp client connect manag store inform obtain via manag configur store commun engin configur api use configur api client test whether given paramet set type static type languag request valu configur api obtain inform configur store commun api commun api use send receiv messag contain function send receiv messag well support pack complex data structur transport use messagepack use commun engin actual work execut api execut api implement submodel execut loop well execut loop type kernel allow user defin model class set member function one oper librari take care call function correct order pass messag see littlemuscle_ submodelpy_ prototyp log api log api use client log inform progress error etc someth goe wrong distribut system often difficult find happen log output easili avail singl locat make much easier muscl provid conveni furthermor log system use obtain basic perform inform use planner alloc resourc effici mmp client mmp client commun manag code partial gener grpc specif muscl manag protocol provid function modul regist instanc get peer get configur inform send log messag implement commun manag initialis network locat manag configur store configur store contain inform configur instanc like manag basic contain configur inform dictionari structur map name model paramet string valu string integ float point number nil none null unlik manag configur store contain configur inform instanc maintain stack dictionari lookup paramet valu start dictionari top stack fall paramet found paramet set nil explicitli thu overrid valu lower stack present dictionari nil default instanc call coordin api see regist send dictionari paramet default valu becom bottom layer stack commun engin commun engin compon libmuscl take care commun instanc keep list endpoint send endpoint locat peer side conduit connect endpoint inform pass coordin api part start send receiv messag end point direct commun api know anyth content messag actual commun done tcp submodul know set connect peer given network locat perform actual commun futur envis submodul protocol well eg mpi _submodelpi httpsgithubcommultiscalelittlemuscleblobdeveloplittlemusclesubmodelpi _littlemuscl httpsgithubcommultiscalelittlemuscl toctre maxdepth caption content introductionrst managerrst libmusclerst muscl technic design introduct comput scienc involv develop simul model complex natur system often sever process system relev research question pose mani case process act differ scale time space model system sever submodel one process combin togeth multiscal model implement multiscal model softwar kind subsystem requir respons coupl model subsystem ensur submodel exchang inform need model configur paramet avail submodel case dynam use comput resourc correct set submodel run need thu coupl librari provid coordin commun addit comput done submodel muscl third major version multiscal coupl librari environ muscl ground solid theoret basi provid multiscal model languag mml extend includ mechan run larg dynam size set submodel use muscl submodel written differ program languag coupl togeth data exchang via network facilit distribut execut muscl core compon multiscal model simul framework mmsf highperform distribut comput anatomi muscl simul muscl simul run consist set kernel includ submodel well compon separ program run independ exchang inform manag coordin activ simul start startup phase kernel connect set exchang kernel place abl commun execut phase start execut phase kernel oper independ exchang inform need manag remain activ handl dynam instanti new kernel well log execut across multipl highperform comput hpc resourc separ program usual requir forward messag cluster due constraint impos network architectur ie firewal way muscl transport overlay mto detail mto ad document later muscl provid four compon build simul first central manag keep track kernel execut inform other locat commun channel set also provid central facil kernel configur centralis log start extra kernel demand libmuscl librari submodel kernel link provid function need part muscl simul libmuscl avail sever program languag exist kernel use asi user free choos suitabl languag besid two piec softwar muscl compris two commun protocol first muscl manag protocol mmp use kernel commun manag second muscl data protocol mdp use exchang data kernel simul walkthrough section muscl simul describ bit detail describ muscl simul consist startup phase follow execut phase assum simul initi launcher extern program start manag initi set kernel instanc one machin startup manag begin read configur file describ model file ymml format yamlbas represent multiscal model languag contain descript submodel connect topolog set paramet valu run variou submodel read configur file manag wait instanc contact instanc start contact manag pass network locat via command line regist provid name descript commun endpoint network locat listen registr instanc contact manag request network locat peer commun manag pass instanc inform combin content ymml file inform sent instanc next instanc request set paramet valu manag return one read ymml file kernel instanc start execut execut instanc normal execut loop send receiv messag loop execut term set endpoint endpoint either send endpoint receiv endpoint endpoint properti kernel inform instanc endpoint connect manag libmuscl seen use user code case dynam instanti kernel may need achiev includ dynam conduit model descript dynam conduit connect send endpoint run instanc receiv endpoint instanc start demand send instanc send messag send endpoint must happen libmuscl libmuscl contact manag ask provid suitabl receiv submodel instanc manag look kind instanc provid creat reus instanc return network locat new receiv instanc libmuscl send messag execut instanc gener log messag use check progress debug log level messag threshold set local log written log file machin instanc run log level threshold central log sent manag record central log file model descript descript model compris descript kernel instanc kernel run model made conduit carri inform instanc inform read manag configur file ymml format section model descript describ detail kernel kernel context comput program use muscl commun outsid world kernel execut run success oper multiscal model languag specifi three kind kernel submodel mapper proxi set oper execut order muscl support specif also provid gener interfac use kind kernel requir submodel kernel five oper run accord submodel execut loop sel sel submodel startup first receiv one messag determin initi state f_init send one messag describ part initi state o_i next perform state updat possibl receiv messag provid addit input next updat boundari condit possibl receiv messag b loop back send messag describ new state boundari condit updat submodel may leav loop done send one final set messag describ final state o_f end present run need submodel kernel may restart begin mapper singl oper set receiv endpoint set send endpoint mapper singl receiv endpoint sever send endpoint fanout mapper mapper sever receiv endpoint singl send endpoint fanin mapper mapper first receiv one messag receiv endpoint send one messag send endpoint mapper may restart receiveandsend mapper must send messag send endpoint whenev receiv messag receiv endpoint proxi new kind kernel muscl singl oper p four set conduit describ detail later endpoint endpoint use kernel commun outsid world uniqu kernel name associ oper data type oper may come restrict endpoint eg submodel oper may receiv messag send endpoint associ oper therefor invalid instanc instanc process kernel run comput model may contain one even mani instanc kernel exampl instanc calcul part spatial domain model descript contain list instanc compris model instanc definit specifi kernel instanc contain configur inform kernel configur consist three part space time scale model process muscl builtin set kernel paramet scale muscl defin grain step cell size extent total size kernel oper grid space scale specifi grid size kernel repeat solv step time scale specifi size time step overal durat simul spatial tempor scale chosen care depend spatial tempor characterist model phenomenon muscl builtin set set use libmuscl userwritten kernel code includ eg configur log subsystem final kernel paramet defin maker kernel kind model paramet configur conduit conduit connect instanc allow exchang messag specif conduit connect send endpoint given instanc receiv endpoint anoth instanc manag architectur muscl manag consist sever modul specif respons togeth perform task requir manag compon mmp server listen connect kernel respond logger get log messag write log file instanc registri store inform instanc configur store store kernel configur inform topolog store store inform connect instanc libmml read ymml file extract inform kernel instanc conduit main creat compon perform startup task mmp server mmp server grpc server listen request instanc servic call function logger instanc registri configur store topolog store request includ log request registr request configur request peer request deregistr request dynam peer request describ later log request request log messag instanc send log messag high enough log level eg critic error log messag use perform track log messag structur see descript logger registr request instanc make known manag instanc send name list endpoint network locat listen string server send inform instanc registri return noth configur request sent instanc send instanc name receiv dictionari paramet valu see configur store peer request sent instanc regist send instanc name receiv either error messag peer yet regist list record contain sender endpoint name slot number target network locat receiv name receiv endpoint name one record endpoint instanc regist registr request string except slot number integ alway equal chang vector conduit ad describ later mmp server obtain inform instanc registri get send endpoint request instanc topolog store get outgo conduit name receiv instanc instanc registri get network locat receiv instanc deregistr request sent instanc shut contain instanc name caus mmp server remov instanc instanc registri logger logger compon take log messag consist instanc name oper time stamp log level messag text write log file text format initi fix musclelog current directori configur locat niceti ad later log level configur though futur want abil write instanc name oper time stamp given log level second file machineread format eg json instanc registri instanc registri store inform current run instanc simpl inmemori databas user mmp server add request remov entri instanc registri store follow inform instanc instanc name network locat list endpoint endpoint name oper data type new instanc ad instanc registri instanc delet given name instanc retriev name configur store configur store contain inform configur model run basic contain configur inform dictionari structur map name model paramet string valu string integ float point number nil none null configur store maintain dictionari instanc dictionari read ymml file startup main compon pass configur store later mmp server request dictionari given instanc order servic request instanc topolog store topolog store store list conduit conduit send instanc name send endpoint name receiv instanc name receiv endpoint name also read ymml file inform use mmp server servic peer request libmml libmml python librari read write ymml file yamlbas represent mml graph ymml file format still need design base xmml extens support compat pattern libmml base python yaml librari shim layer add syntact sugar file format make easier type hand libmml part muscl use ymml file contain inform kernel instanc connect paramet use inform deploy simul probabl kept separ although two cours relat main main compon muscl manag perform startup manag pars command line set log level given read ymml file locat construct compon load ymml file store inform configur store topolog store start mmp server pass control