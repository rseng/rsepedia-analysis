parmap nutshel parmap minimalist librari allow exploit multicor architectur ocaml program minim modif want use mani core acceler oper happen map fold mapfold mapreduc use parmap parmap parfold parmapfold primit place standard listmap friend specifi number subprocess use option paramet ncore see exampl directori coupl run program do dont parmap meant replac full fledg implement parallel skeleton map reduc pipe mani other describ scientif literatur sinc end much earlier specif implement googl engin popularis meant instead allow quickli leverag idl process power extra core handl heavi comput load principl parmap simpl call one three avail primit map fold mapfold ocaml sequenti program fork n subprocess choos n subprocess perform comput n data chunk size choos return result share memori area parent process resum execut children termin data recollect need run program singl multicor machin repeat parmap _i meant_ run cluster see one mani avail reimplement mapreduc schema fork parent process singl machin children get access free data structur alreadi built even imper one far comput insid mapfold produc side effect need preserv final result perform sequenti oper differ might get faster ocaml code reason simpl margin reli extern c librari magic done oper system fork memori map mechan one could gain speed implement marshalunmarsh oper directli bigarray yet cours happen open channel file connect use parent process program may behav wierd way exampl open graphic window call parmap primit use librari program multithread pin process physic cpu obtain maximum speed parmap tri pin worker process cpu use schedul affin interfac avail recent linux kernel similar function may obtain differ platform use slightli differ api contribut welcom support api make sure use autoconf properli use parmap ocamlnat use parmap nativ toplevel may quit use use nativ toplevel perform fast interact comput rememb need load cmx modul exampl given exampletopnatml preserv output order parmap number chunk equal number core easi preserv order element sequenc pass mapfold oper result list order sequenti function would appli input parmap parmapfold parfold function chunksiz argument use user specifi chunksiz differ number core current implement parmap parmapi array_parmap array_parmapi default guarante preserv order result keepord paramet set true altern implement use tag chunk reorder end result call parmapparmap f l listmap f l depend natur workload particular number chunk size result may way effici implement sort mechan may also end use twice space time default implement tradeoff user choos solut better suit himher reorder logic implement parmapfold parfold variant perform oper parallel make sens order irrelev gener use littl chunksiz help balanc load among worker provid better speed incur littl overhead tag reorder chunk tradeoff user choos solut better suit himher fast map array float array visit array much faster visit list convers array list expens larg data structur provid specialis version map array beav exactli like parmap also provid highli optimis specialis parmap version target float array array_float_parmap allow perform parallel comput larg float array effici without boxingunbox overhead introduc primit includ array_parmap understand effici issu involv case larg array float short summari step implement parallel map function must perform creat float array hold result comput oper expens intel creat float array take millisecond ocaml ocamlnat object caml version nativ toplevel load unixcmx let unixgettimeofday ignorearraycr unixgettimeofday float creat share memori area possibl copi result array share memori area perform comput children write result share memori area possibl copi result back ocaml array implement need step andor may omit depend user want result array_float_parmap perform step possibl share step among subsequ call parallel function prealloc result array share memori buffer pass option paramet array_float_parmap function may save signific amount time array larg instal opam opam instal parmap sourc make make instal make test