PROJECT(qcpp)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

OPTION(QCPP_ENABLE_TESTS "Enable building & running unit tests" ON)

IF(QCPP_ENABLE_TESTS)
    ENABLE_TESTING()
ENDIF()

IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE Release)
ENDIF()

IF (NOT QCPP_VERSION)
        # git describe as versioning
        EXECUTE_PROCESS(COMMAND git describe --always
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        OUTPUT_VARIABLE QCPP_VERSION
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF()

MESSAGE(STATUS "${CMAKE_BUILD_TYPE} build of ${PROJECT_NAME} version: ${QCPP_VERSION}")

## User options

OPTION(STATIC_BINARIES "Link programs to libqcpp.a not .so" ON)
OPTION(ENABLE_ASAN "Build with AddressSanitizer" OFF)
OPTION(ENABLE_TSAN "Build with ThreadSanitizer" OFF)

if (STATIC_BINARIES)
    message(STATUS "Building static ${PROJECT_NAME} binaries")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++")
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
endif()

###############################
## Find Packages and Headers ##
###############################


SET(SEQAN_FIND_DEBUG False)

FIND_PACKAGE(BZip2)
FIND_PACKAGE(ZLIB REQUIRED)
FIND_PACKAGE(OpenMP)

LIST(APPEND CMAKE_PREFIX_PATH "${PROJECT_SOURCE_DIR}/src/ext/seqan-2.2.0/")
FIND_PACKAGE(SeqAn 2.2.0 REQUIRED)

FIND_PACKAGE(Boost REQUIRED)
FIND_PACKAGE(YamlCpp REQUIRED)

SET(QCPPDEPS_LIB_DIRS ${QCPPDEPS_LIB_DIRS} ${YAMLCPP_LIBRARY_DIR})
SET(QCPPDEPS_LIBS ${QCPPDEPS_LIBS} ${YAMLCPP_LIBRARY} ${SEQAN_LIBRARIES})
SET(QCPPDEPS_INCLUDE_DIRS ${QCPPDEPS_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${YAMLCPP_INCLUDE_DIR} ${SEQAN_INCLUDE_DIRS})
SET(QCPPDEPS_DEFINITIONS ${QCPPDEPS_DEFINITIONS} ${SEQAN_DEFINITIONS})
SET(QCPPDEPS_CXX_FLAGS ${QCPPDEPS_CXX_FLAGS} ${SEQAN_CXX_FLAGS})


##########################
## Set Compiler Options ##
##########################

# Set CFLAGS
SET(WRN "${WRN} -Wall -Wextra")

SET(OPT_FLAGS "${OPT_FLAGS} -O3 -ffast-math")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WRN} ${OPT_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WRN} ${OPT_FLAGS} ${QCPPDEPS_CXX_FLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

IF(ENABLE_ASAN AND ENABLE_TSAN)
	MESSAGE(FATAL_ERROR "Cannot enable both TSan and ASan")
ENDIF()

IF(ENABLE_UBSAN)
	MESSAGE(STATUS "UBSan Enabled")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=undefined")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
ENDIF()

IF(ENABLE_ASAN)
	MESSAGE(STATUS "ASan Enabled")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
ENDIF()

IF(ENABLE_TSAN)
	MESSAGE(STATUS "TSan Enabled")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=thread -fPIC -pie")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread -fPIC -pie")
ENDIF()

INCLUDE_DIRECTORIES(${QCPPDEPS_INCLUDE_DIRS}
                    ${CMAKE_BINARY_DIR}
                    ${PROJECT_SOURCE_DIR}/src
                    ${PROJECT_SOURCE_DIR}/src/tests
                    ${PROJECT_SOURCE_DIR}/src/tests/ext
                    )

LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/lib)

ADD_SUBDIRECTORY(src)
